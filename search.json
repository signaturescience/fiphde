[{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://signaturescience.github.io/fiphde/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"VP Nagraj. Author, maintainer. Shakeel Jessa. Author. Chris Hulme-Lowe. Author. Stephen Turner. Author.","code":""},{"path":"https://signaturescience.github.io/fiphde/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nagraj V, Jessa S, Hulme-Lowe C, Turner S (2022). fiphde: Forecasting Influenza Support Public Health Decision Making. R package version 0.0.0.9000, https://signaturescience.github.io/fiphde/.","code":"@Manual{,   title = {fiphde: Forecasting Influenza in Support of Public Health Decision Making},   author = {VP Nagraj and Shakeel Jessa and Chris Hulme-Lowe and Stephen Turner},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://signaturescience.github.io/fiphde/}, }"},{"path":"https://signaturescience.github.io/fiphde/index.html","id":"fiphde","dir":"","previous_headings":"","what":"Forecasting Influenza in Support of Public Health Decision Making","title":"Forecasting Influenza in Support of Public Health Decision Making","text":"FIPHDE: Forecasting Influenza Support Public Health DEcision Making","code":""},{"path":"https://signaturescience.github.io/fiphde/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forecasting Influenza in Support of Public Health Decision Making","text":"Install FIPHDE GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"signaturescience/fiphde\", build_vignettes = TRUE)"},{"path":"https://signaturescience.github.io/fiphde/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Forecasting Influenza in Support of Public Health Decision Making","text":"get started, see package vignette:","code":"vignette(\"fiphde\")"},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fiphde: Forecasting Influenza in Support of Public Health Decision Making — fiphde-package","title":"fiphde: Forecasting Influenza in Support of Public Health Decision Making — fiphde-package","text":"Miscellaneous functions retrieving data, creating evaluating time series forecasting models influenza-like illness (ILI) influenza hospitalizations United States.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fiphde: Forecasting Influenza in Support of Public Health Decision Making — fiphde-package","text":"Maintainer: VP Nagraj pnagraj@signaturescience.com (ORCID) Authors: Shakeel Jessa sjessa@signaturescience.com Chris Hulme-Lowe mscholz@signaturescience.com Stephen Turner sturner@signaturescience.com (ORCID)","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPHDE explorer app launcher — fiphde_launcher","title":"FIPHDE explorer app launcher — fiphde_launcher","text":"explorer app allows user view plots forecasts, inspect tabular output submission files, download subsets forecast submission data. app includes interface interactively select locations include plots, table, download. function wraps shiny::runApp accepts arguments data forecasts plotted, well directory containing submission files, temporarily attached global environment use app session. Additional arguments passed ... inherited runApp.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPHDE explorer app launcher — fiphde_launcher","text":"","code":"fiphde_launcher(.data, submission_dir, app_dir = NULL, ...)"},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPHDE explorer app launcher — fiphde_launcher","text":".data Tibble historical data trend leading forecast submission_dir Full path directory submission files containing forecast submissions explore app_dir Full path directory explorer app; default NULL app directory resolved system.file(\"app\", package=\"fiphde\") ... Additional arguments passed runApp","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPHDE explorer app launcher — fiphde_launcher","text":"function starts shiny app. exit removes objects (see \".data\" \"submission_dir\") temporarily attached used app session.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast ILI — forecast_ili","title":"Forecast ILI — forecast_ili","text":"Forecasts ILI specified weeks future. Used downstream modeling.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast ILI — forecast_ili","text":"","code":"forecast_ili(   ilidat,   horizon = 4L,   trim_date = NULL,   models = list(arima = \"PDQ(0,0,0)+pdq(1:2,0:2,0)\"),   ... )"},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast ILI — forecast_ili","text":"ilidat Data returned get_cdc_ili. horizon Optional horizon periods forecasts generated; default 4 trim_date Earliest start date want use ILI data. Default NULL trim. models list model parameters passed ts_fit_forecast. Defaults list(arima=\"PDQ(0,0,0)+pdq(1:2,0:2,0)\". See help ts_fit_forecast. ... arguments passed ts_fit_forecast (passed fable::ARIMA.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast ILI — forecast_ili","text":"named list containing: ilidat: data sent function filtered location trim_date. Select columns returned. ilidat_tsibble: tsibble class object returned running make_tsibble data . ili_fit: fit fabletools::model. ili_forecast: forecast fabletools::forecast specified horizon. ili_future: horizon-number weeks ILI data forecasted future. ili_bound: data 1 bound data 5. arima_params: tibble ARIMA model parameters location (type=\"arima\"). locstats: tibble missing data information locations. removed: tibble locations removed high missing ILI data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forecast ILI — forecast_ili","text":"Currently limited one location .","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast ILI — forecast_ili","text":"","code":"if (FALSE) { # Get data ilidat <- get_cdc_ili(region = c(\"national\", \"state\", \"hhs\"),                       years = 2010:lubridate::year(lubridate::today()))  # Using data only from march 2020 forward, for US only ilidat_us <- ilidat %>% dplyr::filter(location==\"US\") # Replace most recent week with nowcast data, and nowcast last week ilidat_us <- ilidat_us %>% replace_ili_nowcast(weeks_to_replace=1) ilifor_us <- forecast_ili(ilidat_us, horizon=4L, trim_date=\"2020-03-01\") ilifor_us$ili_fit ilifor_us$arima_params ilifor_us$ili_forecast head(ilifor_us$ili_bound) tail(ilifor_us$ili_bound, 10) # Plot library(dplyr) library(ggplot2) theme_set(theme_classic()) ilifor_us$ili_bound %>%   mutate(date=cdcfluview::mmwr_week_to_date(epiyear, epiweek)) %>%   filter(date>\"2021-03-01\") %>%   ggplot(aes(date, ili)) +   geom_line(lwd=.3, alpha=.5) +   geom_point(aes(col=forecasted), size=2)  # At the state level ilidat_st <- ilidat %>% dplyr::filter(region_type==\"States\") ilifor_st <- forecast_ili(ilidat_st, horizon=4L, trim_date=\"2019-01-01\",                           models=list(ets=\"season(method='N')\")) ilifor_st$ili_fit ilifor_st$arima_params ilifor_st$ili_forecast head(ilifor_us$ili_bound) tail(ilifor_us$ili_bound, 10) # Plot library(dplyr) library(ggplot2) theme_set(theme_classic()) ilifor_st$ili_bound %>%   mutate(date=cdcfluview::mmwr_week_to_date(epiyear, epiweek)) %>%   filter(date>\"2021-08-01\") %>%   ggplot(aes(date, ili, col=forecasted)) +   geom_line(lwd=.3) +   geom_point(aes(col=forecasted), size=.7) +   facet_wrap(~abbreviation, scale=\"free_y\")  ## At the HHS regional level ilidat_hhs <- ilidat %>% dplyr::filter(region_type==\"HHS Regions\") ilifor_hhs <- forecast_ili(ilidat_hhs, horizon=4L, trim_date=\"2020-03-01\") ilifor_hhs$ili_fit ilifor_hhs$arima_params ilifor_hhs$ili_forecast head(ilifor_us$ili_bound) tail(ilifor_us$ili_bound, 10) # Plot library(dplyr) library(ggplot2) theme_set(theme_classic()) ilifor_hhs$ili_bound %>%   mutate(date=cdcfluview::mmwr_week_to_date(epiyear, epiweek)) %>%   filter(date>\"2021-08-01\") %>%   ggplot(aes(date, ili, col=forecasted)) +   geom_line(lwd=.3) +   geom_point(aes(col=forecasted), size=.7) +   facet_wrap(~abbreviation, scale=\"free_y\") }"},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":null,"dir":"Reference","previous_headings":"","what":"Format forecasts for submission — format_for_submission","title":"Format forecasts for submission — format_for_submission","text":"function prepares influenza hospitalization forecasts format required submission FluSight.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format forecasts for submission — format_for_submission","text":"","code":"format_for_submission(   .forecasts,   method = \"ts\",   .target = \"wk ahead inc flu hosp\" )"},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format forecasts for submission — format_for_submission","text":".forecasts Forecasts formatted submission; method \"ts\" forecasts ts_fit_forecast; otherwise must tibble forecast output (e.g. output glm_forecast) colum designating \"location\" method Method forecasting; default \"ts\" trigger use ts_format_for_submission internally .target Name target forecast. Default \"wk ahead inc flu hosp\".","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format forecasts for submission — format_for_submission","text":"named list tibbles, one model, formatted submission.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Format forecasts for submission — format_for_submission","text":"https://github.com/cdcepi/Flusight-forecast-data/blob/master/data-forecasts/README.md","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format forecasts for submission — format_for_submission","text":"","code":"if (FALSE) { # Get raw data from healthdata.gov h_raw <- get_hdgov_hosp(limitcols=TRUE) ## save(h_raw, file=\"~/Downloads/h_raw.rd\") ## load(file=\"~/Downloads/h_raw.rd\")  # Prep, and make a tsibble prepped_hosp <- prep_hdgov_hosp(h_raw, statesonly=TRUE) prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to only Virginia and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit a model hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                constrained=TRUE,                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # format for submission formatted_list <- format_for_submission(hosp_fitfor$tsfor, method = \"ts\") formatted_list }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hospitalization data from CDC FluView — get_cdc_hosp","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"Get hospitalization data CDC FluView. See cdcfluview::hospitalizations.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"","code":"get_cdc_hosp(years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"years vector years retrieve data (.e. 2014 CDC flu season 2014-2015). CDC data going back 2009 previous flu season. Default value (NULL) retrieves years.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"cdcfluview documentation: https://hrbrmstr.github.io/cdcfluview/index.html#retrieve-ilinet-surveillance-data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"","code":"if (FALSE) { get_cdc_hosp(years=2019) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ILI data from CDC FluView — get_cdc_ili","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"Get ILI data CDC FluView. See cdcfluview::ilinet.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"","code":"get_cdc_ili(region = c(\"national\", \"state\", \"hhs\"), years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"region Either \"state\", \"national\", \"hhs\". Defaults c(\"national\", \"state\", \"hhs\") three. years vector years retrieve data . CDC data going back 1997. Default value (NULL) retrieves years.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"cdcfluview documentation: https://hrbrmstr.github.io/cdcfluview/index.html#retrieve-ilinet-surveillance-data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"","code":"if (FALSE) { get_cdc_ili(region=\"national\", years=2021) get_cdc_ili(region=\"hhs\", years=2021) get_cdc_ili(region=\"state\", years=2021) %>% dplyr::filter(abbreviation==\"VA\") get_cdc_ili(region=c(\"national\", \"state\"), years=2021) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vaccination data — get_cdc_vax","title":"Get vaccination data — get_cdc_vax","text":"Get vaccination data cdc.gov endpoint.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vaccination data — get_cdc_vax","text":"","code":"get_cdc_vax(   endpoint = \"https://data.cdc.gov/api/views/k87d-gv3u/rows.csv\",   app_token = Sys.getenv(\"HEALTHDATA_APP_TOKEN\") )"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vaccination data — get_cdc_vax","text":"endpoint URL cdc.gov endpoint. See references. app_token App token healthdata.gov. NULL might get rate limited. Add entry ~/.Renviron HEALTHDATA_APP_TOKEN=\"tokenhere\" got https://healthdata.gov/profile/edit/developer_settings.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vaccination data — get_cdc_vax","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get vaccination data — get_cdc_vax","text":"API documentation: https://dev.socrata.com/foundry/data.cdc.gov/k87d-gv3u.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get vaccination data — get_cdc_vax","text":"","code":"if (FALSE) { d <- get_cdc_vax() d library(ggplot2) d %>%   ggplot(aes(date, cumulative_flu_doses_distributed)) +   geom_line() +   facet_wrap(~season, scale=\"free_x\") +   theme_bw() rm(d) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hospitalization data — get_hdgov_hosp","title":"Get hospitalization data — get_hdgov_hosp","text":"Retrieves hospitalization data healthdata.gov endpoint optional filtering fields, return results nice tibble.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hospitalization data — get_hdgov_hosp","text":"","code":"get_hdgov_hosp(   endpoint = \"https://healthdata.gov/api/views/g62h-syeh/rows.csv\",   app_token = Sys.getenv(\"HEALTHDATA_APP_TOKEN\"),   limitcols = FALSE )"},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hospitalization data — get_hdgov_hosp","text":"endpoint URL healthdata.gov endpoint (see references).. app_token App token healthdata.gov. NULL might get rate limited. Add entry ~/.Renviron HEALTHDATA_APP_TOKEN=\"tokenhere\" got https://healthdata.gov/profile/edit/developer_settings. limitcols Limit columns returned subjectively defined important ones?","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hospitalization data — get_hdgov_hosp","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get hospitalization data — get_hdgov_hosp","text":"API documentation: http://dev.socrata.com/foundry/healthdata.gov/g62h-syeh.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hospitalization data — get_hdgov_hosp","text":"","code":"if (FALSE) { get_hdgov_hosp(limitcols=TRUE) get_hdgov_hosp(mindate=\"2021-11-01\", limitrows=10, limitcols=FALSE) get_hdgov_hosp(state=\"VA\") get_hdgov_hosp(state=\"VA\", mindate=\"2021-10-01\") get_hdgov_hosp(state=\"VA\", mindate=\"2021-10-01\", maxdate=\"2021-10-31\") get_hdgov_hosp(state=\"VA\", mindate=\"2021-10-01\", maxdate=\"2021-11-21\", limitrows=5) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ILI nowcast — get_nowcast_ili","title":"Get ILI nowcast — get_nowcast_ili","text":"Get ILI nowcast CMU Delphi ILI Nearby. See examples.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ILI nowcast — get_nowcast_ili","text":"","code":"get_nowcast_ili(   epiyearweeks = NULL,   dates = lubridate::today() - c(14, 7),   state = NULL,   boundatzero = TRUE )"},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ILI nowcast — get_nowcast_ili","text":"epiyearweeks vector epiyear-epiweeks retrieve data , e.g., 202150, 202151, etc. Exclusive dates dates vector dates retrieve data , e.g., \"\"2021-12-12\" \"2021-12-19\". Exclusive epiyearweek. Defaults two weeks prior. state vector states retrieve (two-letter abbreviation). Default NULL retrieves states, national, hhs regions. See examples. boundatzero Bound nowcasts zero? defaults TRUE.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ILI nowcast — get_nowcast_ili","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get ILI nowcast — get_nowcast_ili","text":"https://delphi.cmu.edu/nowcast/","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ILI nowcast — get_nowcast_ili","text":"","code":"if (FALSE) { # Defaults to the previous two weeks for all states get_nowcast_ili()  # Otherwise specify one or the other, not both get_nowcast_ili(epiyearweeks=c(\"202150\", \"202151\"), dates=NULL) get_nowcast_ili(epiyearweeks=NULL, dates=c(\"2021-12-12\", \"2021-12-19\"))  # Get just one state for the last years worth of data (back 52 weeks to 1 week) get_nowcast_ili(epiyearweeks=NULL,                 dates=lubridate::today()-seq(52*7, 7, -7),                 state=\"FL\")  # Compare to ilinet library(dplyr) library(ggplot2) ilidat <- get_cdc_ili(years=2021) ilinow <- get_nowcast_ili() ilijoined <-   inner_join(ilidat, ilinow, by = c(\"location\", \"abbreviation\", \"epiyear\", \"epiweek\")) %>%   select(abbreviation, epiyear, epiweek, weighted_ili, weighted_ili_now) ggplot(ilijoined, aes(weighted_ili, weighted_ili_now)) + geom_point() ilijoined %>%   mutate(diff=weighted_ili_now-weighted_ili) %>%   arrange(desc(abs(diff))) }"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit glm models — glm_fit","title":"Fit glm models — glm_fit","text":"helper function used glm_wrap fit list models select best one.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit glm models — glm_fit","text":"","code":"glm_fit(.data, .models)"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit glm models — glm_fit","text":".data Data including explanatory outcome variables needed modeling; must include column \"location\" .models List models defined trending_model objects","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit glm models — glm_fit","text":"tibble containing characteristics \"best\" glm model (.e., model \".models\" list lowest RMSE). columns tibble include: model_class: \"type\" model best fit fit: fitted model object best fit location: geographic data: Original model fit data tibble list column","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast glm models — glm_forecast","title":"Forecast glm models — glm_forecast","text":"function uses fitted model object glm_fit future covariate data create probablistic forecasts specific quantiles derived \"alpha\" parameter.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast glm models — glm_forecast","text":"","code":"glm_forecast(   .data,   new_covariates = NULL,   fit,   alpha = c(0.01, 0.025, seq(0.05, 0.45, by = 0.05)) * 2 )"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast glm models — glm_forecast","text":".data Data including explanatory outcome variables needed modeling new_covariates Tibble one column per covariate, n rows n horizons forecasted fit Fitted model object glm_fit alpha Vector specifying threshold(s) used prediction intervals; alpha 0.05 correspond 95% PI; default c(0.01, 0.025, seq(0.05, 0.45, = 0.05)) * 2 range intervals","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast glm models — glm_forecast","text":"Tibble forecasts (quantiles point estimates)","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quantiles from prediction intervals — glm_quibble","title":"Get quantiles from prediction intervals — glm_quibble","text":"function runs predict.trending_model_fit method fitted model specified values \"alpha\" order create range prediction intervals. processing also includes steps convert alpha corresponding quantile values upper lower bounds.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quantiles from prediction intervals — glm_quibble","text":"","code":"glm_quibble(   fit,   new_data,   alpha = c(0.01, 0.025, seq(0.05, 0.45, by = 0.05)) * 2 )"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quantiles from prediction intervals — glm_quibble","text":"fit Fitted model object glm_fit new_data Tibble new data predict.trending_model_fit method run alpha Vector specifying threshold(s) used prediction intervals; alpha 0.05 correspond 95% PI; default c(0.01, 0.025, seq(0.05, 0.45, = 0.05)) * 2 range intervals","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get quantiles from prediction intervals — glm_quibble","text":"tibble predicted values quantile (lower upper bound value \"alpha\")","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Run glm modeling and forecasting — glm_wrap","title":"Run glm modeling and forecasting — glm_wrap","text":"wrapper function pipelines influenza hospitalization modeling (glm_fit) forecasting (glm_forecast).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run glm modeling and forecasting — glm_wrap","text":"","code":"glm_wrap(   .data,   .models,   new_covariates = NULL,   horizon = 4,   alpha = c(0.01, 0.025, seq(0.05, 0.45, by = 0.05)) * 2 )"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run glm modeling and forecasting — glm_wrap","text":".data Data including explanatory outcome variables needed modeling .models List models defined trending_model objects new_covariates Tibble one column per covariate, n rows n horizons forecasted horizon Number weeks ahead forecasting alpha Vector specifying threshold(s) used prediction intervals; alpha 0.05 correspond 95% PI; default c(0.01, 0.025, seq(0.05, 0.45, = 0.05)) * 2 range intervals","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run glm modeling and forecasting — glm_wrap","text":"Named list two elements: model: Output glm_fit selected model fit forecasts: Output glm_forecast forecasts horizon combined single tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/is_monday.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Monday — is_monday","title":"Check Monday — is_monday","text":"helper function see today Monday.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/is_monday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Monday — is_monday","text":"","code":"is_monday()"},{"path":"https://signaturescience.github.io/fiphde/reference/is_monday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Monday — is_monday","text":"Logical indicating whether today Monday","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Make tsibble — make_tsibble","title":"Make tsibble — make_tsibble","text":"function converts input tibble columns epiyear epiweek tsibble object. tsibble columns specifying indices time series well date Monday epiyear/epiweek combination row.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make tsibble — make_tsibble","text":"","code":"make_tsibble(df, epiyear, epiweek, key = location)"},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make tsibble — make_tsibble","text":"df tibble containing columns epiyear epiweek. epiyear Unquoted variable name containing MMWR epiyear. epiweek Unquoted variable name containing MMWR epiweek. key Unquoted variable name containing name column tsibble key. See tsibble::as_tsibble.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make tsibble — make_tsibble","text":"tsibble containing additional columns monday indicating date Monday epiweek, yweek (yearweek vctr class object) indexes tsibble 1 week increments.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make tsibble — make_tsibble","text":"","code":"d <- tibble::tibble(epiyear=c(2020, 2020, 2021, 2021),                     epiweek=c(52, 53, 1, 2),                     location=\"US\",                     somedata=101:104) make_tsibble(d, epiyear = epiyear, epiweek=epiweek, key=location) #> # A tsibble: 4 x 6 [1W] #> # Key:       location [1] #>   epiyear epiweek monday        yweek location somedata #>     <dbl>   <dbl> <date>       <week> <chr>       <int> #> 1    2020      52 2020-12-21 2020 W52 US            101 #> 2    2020      53 2020-12-28 2020 W53 US            102 #> 3    2021       1 2021-01-04 2021 W01 US            103 #> 4    2021       2 2021-01-11 2021 W02 US            104"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum non-zero — mnz","title":"Minimum non-zero — mnz","text":"Get minimum non-zero positive value vector.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum non-zero — mnz","text":"","code":"mnz(x)"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum non-zero — mnz","text":"x numeric vector","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum non-zero — mnz","text":"minimum non-zero positive value x.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum non-zero — mnz","text":"","code":"x <- c(.1, 0, -.2, NA, .3, .4, .0001, -.3, NA, 999) x #>  [1]   0.1000   0.0000  -0.2000       NA   0.3000   0.4000   0.0001  -0.3000 #>  [9]       NA 999.0000 mnz(x) #> [1] 1e-04"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum non-zero replacement — mnz_replace","title":"Minimum non-zero replacement — mnz_replace","text":"Replace zeros negative values minimum non-zero positive value vector.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum non-zero replacement — mnz_replace","text":"","code":"mnz_replace(x)"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum non-zero replacement — mnz_replace","text":"x numeric vector","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum non-zero replacement — mnz_replace","text":"vector length negatives zeros replaced minimum nonzero value vector.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum non-zero replacement — mnz_replace","text":"","code":"x <- c(.1, 0, -.2, NA, .3, .4, .0001, -.3, NA, 999) x #>  [1]   0.1000   0.0000  -0.2000       NA   0.3000   0.4000   0.0001  -0.3000 #>  [9]       NA 999.0000 mnz(x) #> [1] 1e-04 mnz_replace(x) #>  [1]   0.1000   0.0001   0.0001       NA   0.3000   0.4000   0.0001   0.0001 #>  [9]       NA 999.0000 tibble::tibble(x) %>% dplyr::mutate(x2=mnz_replace(x)) #> # A tibble: 10 × 2 #>           x       x2 #>       <dbl>    <dbl> #>  1   0.1      0.1    #>  2   0        0.0001 #>  3  -0.2      0.0001 #>  4  NA       NA      #>  5   0.3      0.3    #>  6   0.4      0.4    #>  7   0.0001   0.0001 #>  8  -0.3      0.0001 #>  9  NA       NA      #> 10 999      999"},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot forecasts — plot_forecast","title":"Plot forecasts — plot_forecast","text":"function serves plotting mechanism prepped forecast submission data. Using truth data supplied, plots show historical trajectory weekly flu hospitalizations along point estimates forecasts. Optionally, user can include 95% prediction interval well. Plots include trajectories weekly flu hospitalizations faceted location.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot forecasts — plot_forecast","text":"","code":"plot_forecast(   .data,   submission,   location = \"US\",   pi = 0.95,   .model = NULL,   .outcome = \"flu.admits\" )"},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot forecasts — plot_forecast","text":".data Historical truth data locations outcomes submission targets submission Formatted submission location Vector specifying locations filter ; 'US' default. pi Width prediction interval plot; default 0.95 95% PI; set NULL PI plotted .model Name model used generate forecasts; default NULL name model assumed stored column called \"model\" formatted submission file .outcome name outcome variable plotting historical data. Defaults \"flu.admits\". may also \"weighted_ili\".","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot forecasts — plot_forecast","text":"ggplot2 plot object line plots outcome trajectories faceted location","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot forecasts — plot_forecast","text":"","code":"if (FALSE) { # Get some data h_raw <- get_hdgov_hosp(limitcols=TRUE) ## save(h_raw, file=\"~/Downloads/h_raw.rd\") ## load(file=\"~/Downloads/h_raw.rd\")  # Prep all the data prepped_hosp_all <- prep_hdgov_hosp(h_raw)  # What are the last four weeks of recorded data? last4 <-   prepped_hosp_all %>%   dplyr::distinct(week_start) %>%   dplyr::arrange(week_start) %>%   tail(4)  #remove those prepped_hosp <-   prepped_hosp_all %>%   dplyr::anti_join(last4, by=\"week_start\")  # Make a tsibble prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to just one state and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit models and forecasts hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                constrained=TRUE,                                trim_date=NULL,                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # Format for submission hosp_formatted <- ts_format_for_submission(hosp_fitfor$tsfor)  # Plot with current and all data plot_forecast(prepped_hosp, hosp_formatted$ensemble) plot_forecast(prepped_hosp_all, hosp_formatted$ensemble) plot_forecast(prepped_hosp, hosp_formatted$ensemble, location=c(\"US\", \"51\")) plot_forecast(prepped_hosp_all, hosp_formatted$ensemble, location=c(\"US\", \"51\")) plot_forecast(prepped_hosp, hosp_formatted$ets) plot_forecast(prepped_hosp_all, hosp_formatted$ets) plot_forecast(prepped_hosp, hosp_formatted$arima) plot_forecast(prepped_hosp_all, hosp_formatted$arima)  # Demonstrating multiple models prepped_hosp <-   h_raw %>%   prep_hdgov_hosp(statesonly=TRUE, min_per_week = 0, remove_incomplete = TRUE) %>%   dplyr::filter(abbreviation != \"DC\")  tsens_20220110 <- readr::read_csv(here::here(\"submission/SigSci-TSENS/2022-01-10-SigSci-TSENS.csv\")) creg_20220110 <- readr::read_csv(here::here(\"submission/SigSci-CREG/2022-01-10-SigSci-CREG.csv\")) combo_20220110 <- dplyr::bind_rows(   dplyr::mutate(tsens_20220110, model = \"SigSci-TSENS\"),   dplyr::mutate(creg_20220110, model = \"SigSci-CREG\") ) plot_forecast(prepped_hosp, combo_20220110, location = \"24\") plot_forecast(prepped_hosp, tsens_20220110, location = \"24\") plot_forecast(prepped_hosp, combo_20220110, location = c(\"34\",\"36\")) plot_forecast(prepped_hosp, creg_20220110, location = \"US\", .model = \"SigSci-CREG\") plot_forecast(prepped_hosp, creg_20220110, location = \"US\", .model = \"SigSci-CREG\")  ## demonstrating different prediction interval widths plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = 0.5) plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = 0.9) plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = 0.95) plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = NULL) }"},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep hospitalization data — prep_hdgov_hosp","title":"Prep hospitalization data — prep_hdgov_hosp","text":"Prep healthdata.gov hospitalization data retrieved using get_hdgov_hosp downstream forecasting. Limits states , trims data, removes incomplete week, removes locations little reporting last month.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep hospitalization data — prep_hdgov_hosp","text":"","code":"prep_hdgov_hosp(   hdgov_hosp,   statesonly = TRUE,   trim = list(epiyear = 2020, epiweek = 43),   remove_incomplete = TRUE,   min_per_week = 1 )"},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep hospitalization data — prep_hdgov_hosp","text":"hdgov_hosp Raw hospitalization data get_hdgov_hosp statesonly Limit US+DC+States (.e., drop territories)? Defaults TRUE. trim list epiyear epiweek trim . Defaults October 25, 2020 (2020:43). data . remove_incomplete Remove last week incomplete? Defaults TRUE. min_per_week minimum number flu.admits per week needed retain state. Default removes states less 1 flu admission per week last 30 days.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep hospitalization data — prep_hdgov_hosp","text":"tibble; hospitalization data ready downstream forecasting.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep hospitalization data — prep_hdgov_hosp","text":"","code":"if (FALSE) { hdgov_hosp <- get_hdgov_hosp(limitcols=TRUE) h <- prep_hdgov_hosp(hdgov_hosp) h hts <- make_tsibble(h, epiyear=epiyear, epiweek=epiweek, key=location) hts }"},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace ILInet with nowcast data — replace_ili_nowcast","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"Replaces weighted_ili get_cdc_ili nowcast data get_nowcast_ili number specified weeks_to_replace.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"","code":"replace_ili_nowcast(ilidat, weeks_to_replace = 1)"},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"ilidat Data get_cdc_ili. weeks_to_replace Number weeks ilidat replace. Defaults 2.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"ilidat input, weeks_to_replace weeks replaced nowcasted data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"","code":"if (FALSE) { ilidat <- get_cdc_ili(years=2021) ilidat <-   ilidat %>%   dplyr::filter(location==\"US\" | abbreviation==\"VA\") %>%   dplyr::group_by(location) %>%   dplyr::slice_max(week_start, n=4) %>%   dplyr::select(location:weighted_ili) ilidat iliaug <- replace_ili_nowcast(ilidat, weeks_to_replace=1) iliaug  # arrange for comparison ilidat <- ilidat %>% dplyr::arrange(location, week_start) iliaug <- iliaug %>% dplyr::arrange(location, week_start) # Compare US waldo::compare(ilidat %>% dplyr::filter(location==\"US\"),                iliaug %>% dplyr::filter(location==\"US\")) # Compare VA waldo::compare(ilidat %>% dplyr::filter(location==\"51\"),                iliaug %>% dplyr::filter(location==\"51\")) }"},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":null,"dir":"Reference","previous_headings":"","what":"Score function parameter checker — score_func_param_checker","title":"Score function parameter checker — score_func_param_checker","text":"Unexported utility function check parameters score function. See weighted_interval_score.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score function parameter checker — score_func_param_checker","text":"","code":"score_func_param_checker(quantiles, values, actual_value, id = \"\")"},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score function parameter checker — score_func_param_checker","text":"quantiles vector forecasted quantiles values vector forecasted values actual_value Actual value. id name score function, e.g. \"weighted_interval_score\".","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score function parameter checker — score_func_param_checker","text":"Nothing. Called side effects.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"Replaces weighted_ili get_cdc_ili nowcast data get_nowcast_ili dates specified location. useful getting data states ILI data missing (e.g., Florida).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"","code":"state_replace_ili_nowcast_all(ilidat, state, impute = TRUE, ...)"},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"ilidat Data get_cdc_ili. state Two-letter state abbreviation replace completely impute Logical; try mean impute missing values using immediately preceding following values. See examples. ... arguments passed get_nowcast_ili, e.g. boundatzero, TRUE default.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"ilidat input, state's data get_cdc_ili replaced nowcast data get_nowcast_ili.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"replaces instances weighted_ili specified state weighted_ili NA. ILI data FL missing, .","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"","code":"if (FALSE) { ilidat <- get_cdc_ili(years=2020) ilidat <-   ilidat %>%   dplyr::filter(location==\"US\" | abbreviation==\"VA\" | abbreviation==\"FL\") %>%   dplyr::group_by(location) %>%   dplyr::slice_max(week_start, n=4) %>%   dplyr::select(location:weighted_ili) %>%   dplyr::arrange(location, epiyear, epiweek) ilidat state_replace_ili_nowcast_all(ilidat, state=\"FL\") # Example with Florida, which has a negative value for nowcasted ILI ilidat <- get_cdc_ili(years=2019) ilidat <- ilidat %>%   dplyr::filter(location==\"US\" | abbreviation==\"VA\" | abbreviation==\"FL\") %>%   dplyr::filter(epiyear==2020 & epiweek %in% c(20, 21, 22)) %>%   dplyr::select(location:weighted_ili) %>%   dplyr::arrange(location, epiyear, epiweek) ilidat # defaults to bound at zero state_replace_ili_nowcast_all(ilidat, state=\"FL\") # show results when you don't bound at zero state_replace_ili_nowcast_all(ilidat, state=\"FL\", boundatzero=FALSE) # example with missing data in florida ilidat <- get_cdc_ili(region=c(\"national\",\"state\"), years=2019:lubridate::year(lubridate::today())) ilidat <- ilidat %>%   dplyr::filter(abbreviation==\"FL\") %>%   dplyr::filter(week_start>=\"2020-12-13\" & week_start<=\"2021-01-10\") ilidat state_replace_ili_nowcast_all(ilidat, state=\"FL\") state_replace_ili_nowcast_all(ilidat, state=\"FL\", impute=FALSE) }"},{"path":"https://signaturescience.github.io/fiphde/reference/this_monday.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Monday — this_monday","title":"Get Monday — this_monday","text":"function helper get date Monday current week. function determines current week based epidemiogical week orientation (.e., week begins Sunday).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/this_monday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Monday — this_monday","text":"","code":"this_monday()"},{"path":"https://signaturescience.github.io/fiphde/reference/this_monday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Monday — this_monday","text":"Date Monday current week. details see floor_date.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and forecast with time-series approaches. — ts_fit_forecast","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"Fit forecast time-series approaches.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"","code":"ts_fit_forecast(   prepped_tsibble,   outcome = \"flu.admits\",   horizon = 4L,   trim_date = \"2021-01-01\",   models = list(arima = \"PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)\", ets =     \"season(method=\\\"N\\\")\", nnetar = NULL),   covariates = c(\"hosp_rank\", \"ili_rank\"),   ensemble = TRUE,   remove_null_models = TRUE,   ... )"},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"prepped_tsibble tsibble data retrieved get_hdgov_hosp, prepped prep_hdgov_hosp, made tsibble make_tsibble. outcome outcome variable model (default \"flu.admits\"). horizon Number weeks ahead trim_date date (YYYY-MM-DD) point ts modeling started. Default \"2021-01-01\". Set NULL stop trimming. models list right hand side formula contents models want run. See examples. covariates Covariates modeled time series. Defaults c(\"hosp_rank\", \"ili_rank\"), historical data brought prep_hdgov_hosp. ensemble ARIMA ETS models ensembled? Default TRUE. remove_null_models null models removed? Default TRUE. ... arguments passed fable::ARIMA. Defaults list(arima = \"PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)\", ets = \"season(method='N')\", nnetar = NULL) Setting type model NULL turns model . run unconstrained ARIMA: list(arima='PDQ() + pdq()'). See also fable::ARIMA. run seasonal exponential smoothing: list(ets='season(method=c(\"\", \"M\", \"N\"), period=\"3 months\")'). See also fable::ETS. run autoregressive neural net P=1: list(nnetar=\"AR(P=1)\"). See also fable::NNETAR.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"list time series fit, time series forecast, model formulas. tsfit: mdl_df class \"mable\" one row location, columns arima ets models. tsfor: fbl_ts class \"fable\" one row per location-model-timepoint horizon number time points. formulas: list ARIMA, ETS, /NNETAR formulas","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"","code":"if (FALSE) { h_raw <- get_hdgov_hosp(limitcols=TRUE) ## save(h_raw, file=\"~/Downloads/h_raw.rd\") ## load(file=\"~/Downloads/h_raw.rd\") prepped_hosp <- prep_hdgov_hosp(h_raw) prepped_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) prepped_tsibble <-   prepped_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\")) # Run with default constrained ARIMA, nonseasonal ETS, no NNETAR hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\")) # Run an unconstrained ARIMA, seasonal ETS, no NNETAR hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"),                                models=list(arima='PDQ() + pdq()',                                            ets='season(method=c(\"A\", \"M\", \"N\"), period=\"3 months\")',                                            nnetar=NULL)) hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"),                                models=list(arima='PDQ() + pdq()',                                            ets='season(method=c(\"A\", \"M\", \"N\"), period=\"3 months\")',                                            nnetar=\"AR(P=1)\")) }"},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":null,"dir":"Reference","previous_headings":"","what":"Format time series forecast — ts_format_for_submission","title":"Format time series forecast — ts_format_for_submission","text":"Format time series forecast submission.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format time series forecast — ts_format_for_submission","text":"","code":"ts_format_for_submission(   tsfor,   .target = \"wk ahead inc flu hosp\",   .counts = TRUE )"},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format time series forecast — ts_format_for_submission","text":"tsfor forecast ts_fit_forecast. .target Name target forecast. Default \"wk ahead inc flu hosp\". .counts Logical. Default TRUE indicates target outcome count, rounded integer.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format time series forecast — ts_format_for_submission","text":"named list tibbles, one model, formatted submission.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format time series forecast — ts_format_for_submission","text":"Uses quantiles c(0.01, 0.025, seq(0.05, 0.95, = 0.05), 0.975, 0.99) built-fiphde:::q, using accessory table fiphde:::quidk. See data-raw/generate-sysdata.R details.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Format time series forecast — ts_format_for_submission","text":"https://github.com/cdcepi/Flusight-forecast-data/blob/master/data-forecasts/README.md","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format time series forecast — ts_format_for_submission","text":"","code":"if (FALSE) { # Get raw data from healthdata.gov h_raw <- get_hdgov_hosp(limitcols=TRUE)  # Prep, and make a tsibble prepped_hosp <- prep_hdgov_hosp(h_raw, statesonly=TRUE) prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to only Virginia and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit a model hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                constrained=TRUE,                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # format for submission formatted_list <- ts_format_for_submission(hosp_fitfor$tsfor) formatted_list }"},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate forecast submission — validate_forecast","title":"Validate forecast submission — validate_forecast","text":"function take prepped forecast data run series tests validate format.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate forecast submission — validate_forecast","text":"","code":"validate_forecast(subdat)"},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate forecast submission — validate_forecast","text":"subdat tibble submission ready forecasts prepped stored output format_for_submission","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate forecast submission — validate_forecast","text":"Named list elements test (including logical whether test passed message failed) overall \"valid\" logical TRUE tests passed FALSE least one failed","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate forecast submission — validate_forecast","text":"","code":"if (FALSE) { # Get raw data from healthdata.gov h_raw <- get_hdgov_hosp(limitcols=TRUE)  # Prep, and make a tsibble prepped_hosp <- prep_hdgov_hosp(h_raw, statesonly=TRUE) prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to only Virginia and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit a model hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                constrained=TRUE,                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # format for submission formatted_list <- format_for_submission(hosp_fitfor$tsfor, method = \"ts\") validate_forecast(formatted_list$ets) }"},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted interval score — weighted_interval_score","title":"Compute weighted interval score — weighted_interval_score","text":"Computes weighted interval score (WIS), well-known quantile-based approximation commonly-used continuous ranked probability score (CRPS). WIS proper score, can thought distributional generalization absolute error. example, see Bracher et al. (2020) discussion context COVID-19 forecasting.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted interval score — weighted_interval_score","text":"","code":"weighted_interval_score(quantile, value, actual_value)"},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted interval score — weighted_interval_score","text":"quantile vector forecasted quantiles value vector forecasted values actual_value Actual value.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute weighted interval score — weighted_interval_score","text":"https://cmu-delphi.github.io/covidcast/evalcastR/.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate WIS score — wis_score","title":"Calculate WIS score — wis_score","text":"Helper function calculate weighted interval score (WIS) prepped forecasts","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate WIS score — wis_score","text":"","code":"wis_score(.forecasts, .test)"},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate WIS score — wis_score","text":".forecasts Tibble prepped foreacsts .test Tibble test data including observed value flu admissions stored \"flu.admits\" column","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate WIS score — wis_score","text":"Tibble WIS combination epiweek epiyear","code":""}]
