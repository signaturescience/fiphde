[{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://signaturescience.github.io/fiphde/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Basic Usage","text":"fiphde (forecasting influenza support public health decision making) package provides utilities forecasting influenza hospitalizations United States. fiphde includes functions retrieving hospitalization time series data HHS Protect system HealthData.gov, preparing raw data forecasting, fitting time series count regression models create probabilistic forecasts influenza hospitalizations state national levels, visualizing evaluating forecasts, formatting forecasts submission FluSight. fiphde rhymes “fifty,” 50 states US.","code":""},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Basic Usage","text":"fiphde package retrieves current data HHS CDC APIs fits models forecasts using data. vignette uses data current May 28, 2022 (MMWR epidemiological week 21 2022). Running code written produce different results depending run code, new data constantly added historical data constantly revised. get started, load packages used vignette.","code":"library(fiphde) library(dplyr) library(purrr) library(readr) library(ggplot2) theme_set(theme_bw())"},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"data-retrieval","dir":"Articles","previous_headings":"Usage","what":"Data retrieval","title":"Basic Usage","text":"Prior fitting forecasts need first retrieve data HealthData.gov COVID-19 Reported Patient Impact Hospital Capacity State Timeseries API. Running get_hdgov_hosp(limitcols=TRUE) initiate API call argument return selection fields relevant flu hospitalization reporting.","code":"hosp <- get_hdgov_hosp(limitcols = TRUE) hosp #> # A tibble: 43,967 × 14 #>    state date       flu.admits flu.adm…¹ flu.d…² flu.d…³ flu.icu flu.i…⁴ flu.tot #>    <chr> <date>          <dbl>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 AL    2019-12-31         NA         0      NA       0      NA       0      NA #>  2 HI    2019-12-31         NA         0      NA       0      NA       0      NA #>  3 IN    2019-12-31         NA         0      NA       0      NA       0      NA #>  4 LA    2019-12-31         NA         0      NA       0      NA       0      NA #>  5 MN    2019-12-31         NA         0      NA       0      NA       0      NA #>  6 MT    2019-12-31         NA         0      NA       0      NA       0      NA #>  7 NC    2019-12-31         NA         0      NA       0      NA       0      NA #>  8 PR    2019-12-31         NA         0      NA       0      NA       0      NA #>  9 TX    2019-12-31         NA         0      NA       0      NA       0      NA #> 10 AL    2020-01-01         NA         0      NA       0      NA       0      NA #> # … with 43,957 more rows, 5 more variables: flu.tot.cov <dbl>, #> #   cov.admits <dbl>, cov.admits.cov <dbl>, cov.deaths <dbl>, #> #   cov.deaths.cov <dbl>, and abbreviated variable names ¹​flu.admits.cov, #> #   ²​flu.deaths, ³​flu.deaths.cov, ⁴​flu.icu.cov"},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"time-series-forecasting","dir":"Articles","previous_headings":"Usage","what":"Time series forecasting","title":"Basic Usage","text":"first fit time series model, creating ensemble model ARIMA exponential smoothing models. Time series modeling based tidyverts (https://tidyverts.org/) collection packages tidy time series forecasting R.","code":""},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"data-preparation","dir":"Articles","previous_headings":"Usage > Time series forecasting","what":"Data preparation","title":"Basic Usage","text":"need initially prepare data time series forecast. prep_hdgov_hosp function call limit states (territories), remove data incomplete epidemiological week (Sunday-Saturday), remove locations little reported hospitalizations last month, exclude Washington DC downstream analysis. function aggregates total number cases epidemiological week location. function also adds location FIPS codes, joins historical influenza-like illness (ILI) hospitalization mean values ranks week. Historical indicators ILI hospitalizations summarized CDC ILINet CDC FluSurv-Net respectively. Now let’s explore data.  states highest admissions 2021-2022 flu season? Top 10 states highest flu hospitalizations 2021-2022. Next let’s turn tsibble. tsibble objects tibbles index variable describing inherent ordering past present, key defines observational units time. make_tsibble function provides convenience wrapper around tsibble::as_tsibble using epidemiological week’s Monday weekly index location key. Note specification arguments epidemiological week / year location key passed “bare” (unquoted) names columns storing information original tibble.","code":"# Prep data prepped_hosp <-   hosp %>%   prep_hdgov_hosp(statesonly=TRUE, min_per_week = 0, remove_incomplete = TRUE) %>%   dplyr::filter(abbreviation != \"DC\") prepped_hosp #> # A tibble: 4,284 × 13 #>    abbreviation locat…¹ week_start monday     week_end   epiyear epiweek flu.a…² #>    <chr>        <chr>   <date>     <date>     <date>       <dbl>   <dbl>   <dbl> #>  1 US           US      2020-10-18 2020-10-19 2020-10-24    2020      43     218 #>  2 US           US      2020-10-25 2020-10-26 2020-10-31    2020      44     428 #>  3 US           US      2020-11-01 2020-11-02 2020-11-07    2020      45     477 #>  4 US           US      2020-11-08 2020-11-09 2020-11-14    2020      46     585 #>  5 US           US      2020-11-15 2020-11-16 2020-11-21    2020      47     548 #>  6 US           US      2020-11-22 2020-11-23 2020-11-28    2020      48     591 #>  7 US           US      2020-11-29 2020-11-30 2020-12-05    2020      49     577 #>  8 US           US      2020-12-06 2020-12-07 2020-12-12    2020      50     605 #>  9 US           US      2020-12-13 2020-12-14 2020-12-19    2020      51     794 #> 10 US           US      2020-12-20 2020-12-21 2020-12-26    2020      52     874 #> # … with 4,274 more rows, 5 more variables: flu.admits.cov <dbl>, #> #   ili_mean <dbl>, ili_rank <int>, hosp_mean <dbl>, hosp_rank <int>, and #> #   abbreviated variable names ¹​location, ²​flu.admits prepped_hosp %>%    filter(abbreviation %in% c(\"US\", \"CA\", \"TX\", \"NY\")) %>%    ggplot(aes(week_end, flu.admits)) + geom_line() +    facet_wrap(~abbreviation, scale=\"free_y\") prepped_hosp %>%    filter(abbreviation!=\"US\") %>%    filter(week_start>=\"2021-07-01\" & week_end<\"2022-06-30\") %>%    group_by(abbreviation) %>%    summarize(total.flu.admits=sum(flu.admits)) %>%    arrange(desc(total.flu.admits)) %>%    head(10) %>%    knitr::kable(caption=\"Top 10 states with highest flu hospitalizations in 2021-2022.\") prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear=epiyear,                                      epiweek=epiweek,                                      key=location) prepped_hosp_tsibble #> # A tsibble: 4,284 x 14 [1W] #> # Key:       location [51] #>    abbreviat…¹ locat…² week_start monday        yweek week_end   epiyear epiweek #>    <chr>       <chr>   <date>     <date>       <week> <date>       <dbl>   <dbl> #>  1 AL          01      2020-10-18 2020-10-19 2020 W43 2020-10-24    2020      43 #>  2 AL          01      2020-10-25 2020-10-26 2020 W44 2020-10-31    2020      44 #>  3 AL          01      2020-11-01 2020-11-02 2020 W45 2020-11-07    2020      45 #>  4 AL          01      2020-11-08 2020-11-09 2020 W46 2020-11-14    2020      46 #>  5 AL          01      2020-11-15 2020-11-16 2020 W47 2020-11-21    2020      47 #>  6 AL          01      2020-11-22 2020-11-23 2020 W48 2020-11-28    2020      48 #>  7 AL          01      2020-11-29 2020-11-30 2020 W49 2020-12-05    2020      49 #>  8 AL          01      2020-12-06 2020-12-07 2020 W50 2020-12-12    2020      50 #>  9 AL          01      2020-12-13 2020-12-14 2020 W51 2020-12-19    2020      51 #> 10 AL          01      2020-12-20 2020-12-21 2020 W52 2020-12-26    2020      52 #> # … with 4,274 more rows, 6 more variables: flu.admits <dbl>, #> #   flu.admits.cov <dbl>, ili_mean <dbl>, ili_rank <int>, hosp_mean <dbl>, #> #   hosp_rank <int>, and abbreviated variable names ¹​abbreviation, ²​location"},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"fit-a-model-and-forecast","dir":"Articles","previous_headings":"Usage > Time series forecasting","what":"Fit a model and forecast","title":"Basic Usage","text":"Next, let’s fit time series model create forecasts using ts_fit_forecast function. function takes tsibble created , forecast horizon weeks, name outcome variable forecast, optional covariates use ARIMA model. fit non-seasonal ARIMA model autoregressive term (p) restricted 1:2, order integration differencing (d) restricted 0:2, moving average (q) restricted 0 (see ?fable::ARIMA information). model also fits non-seasonal exponential smoothing model (see ?fable::ETS details). example fit autoregressive neural network model, change nnetar=NULL nnetar=\"AR(P=1)\" (see ?fable::nnetar details). can also trim data used modeling, restrict include hospitalization data reported January 1, 2021. setting ensemble=TRUE create ensemble model averages ARIMA exponential smoothing models. remove_null_models=TRUE specification identifies models converge removes downstream processing. function output messages describing ARIMA ETS model formulas passed fable::ARIMA fable::ETS. fitting models, function forecasts outcome specified number weeks. Let’s take look object returned model fit + forecast. see $tsfit, gives us ARIMA, ETS, ensemble model fits list columns, one row per location; $tsfor gives us forecast next four weeks, one row per model per location (key tsibble); $formulas gives us model formulas passed fable modeling functions; models failed converge see locations $nullmodels. Next, can format forecasts submission FluSight using format_for_submission function. list contains separate submission-ready tibbles, one element type model fitted. can check see submission valid. Note fail expected date target dates current dates don’t line . ’ll see message noting “submission target end dates line expected Saturdays horizon. Note submission forecast date Sunday Monday, forecasts assumed start following week.” validation succeeds, $valid element returned list TRUE, FALSE validation checks fail. Let’s plot forecast observed data using plot_forecast function. plot forecasts 50% prediction interval US, New York (FIPS 36) Florida (FIPS 12).    Finally, can pull ARIMA model parameters used location save posterity retrospective analysis.","code":"hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                trim_date = \"2021-01-01\",                                covariates=c(\"hosp_rank\", \"ili_rank\"),                                 models=list(arima='PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)',                                            ets='season(method=\"N\")',                                            nnetar=NULL),                                 ensemble=TRUE,                                 remove_null_models=TRUE) Trimming to 2021-01-01 ARIMA  formula: flu.admits ~ PDQ(0, 0, 0) + pdq(1:2, 0:2, 0) + hosp_rank + ili_rank ETS    formula: flu.admits ~ season(method = \"N\") hosp_fitfor #> $tsfit #> # A mable: 51 x 4 #> # Key:     location [51] #>    location                       arima          ets      ensemble #>    <chr>                        <model>      <model>       <model> #>  1 01       <LM w/ ARIMA(2,0,0) errors> <ETS(A,N,N)> <COMBINATION> #>  2 02       <LM w/ ARIMA(1,0,0) errors> <ETS(A,N,N)> <COMBINATION> #>  3 04       <LM w/ ARIMA(2,1,0) errors> <ETS(M,N,N)> <COMBINATION> #>  4 05       <LM w/ ARIMA(2,1,0) errors> <ETS(A,N,N)> <COMBINATION> #>  5 06       <LM w/ ARIMA(2,2,0) errors> <ETS(M,A,N)> <COMBINATION> #>  6 08       <LM w/ ARIMA(1,1,0) errors> <ETS(A,N,N)> <COMBINATION> #>  7 09       <LM w/ ARIMA(1,1,0) errors> <ETS(A,N,N)> <COMBINATION> #>  8 10       <LM w/ ARIMA(2,1,0) errors> <ETS(A,N,N)> <COMBINATION> #>  9 12       <LM w/ ARIMA(2,2,0) errors> <ETS(M,N,N)> <COMBINATION> #> 10 13       <LM w/ ARIMA(2,1,0) errors> <ETS(A,N,N)> <COMBINATION> #> # … with 41 more rows #>  #> $tsfor #> # A fable: 612 x 10 [1W] #> # Key:     location, .model [153] #>    location .model      yweek flu.admits .mean epiweek ili_mean ili_rank hosp_…¹ #>    <chr>    <chr>      <week>     <dist> <dbl>   <dbl>    <dbl>    <int>   <dbl> #>  1 01       arima    2022 W22  N(16, 56)  16.2      22    1.23        17       0 #>  2 01       arima    2022 W23  N(20, 56)  20.4      23    1.09        14       0 #>  3 01       arima    2022 W24  N(19, 65)  19.2      24    1.02        12       0 #>  4 01       arima    2022 W25  N(21, 65)  21.0      25    0.984       10       0 #>  5 01       ets      2022 W22  N(19, 78)  18.9      22    1.23        17       0 #>  6 01       ets      2022 W23  N(19, 88)  18.9      23    1.09        14       0 #>  7 01       ets      2022 W24  N(19, 99)  18.9      24    1.02        12       0 #>  8 01       ets      2022 W25 N(19, 110)  18.9      25    0.984       10       0 #>  9 01       ensemble 2022 W22  N(18, 63)  17.5      22    1.23        17       0 #> 10 01       ensemble 2022 W23  N(20, 67)  19.7      23    1.09        14       0 #> # … with 602 more rows, 1 more variable: hosp_rank <int>, and abbreviated #> #   variable name ¹​hosp_mean #>  #> $formulas #> $formulas$arima #> flu.admits ~ PDQ(0, 0, 0) + pdq(1:2, 0:2, 0) + hosp_rank + ili_rank #> <environment: 0x563d2a722150> #>  #> $formulas$ets #> flu.admits ~ season(method = \"N\") #> <environment: 0x563d2a722150> #>  #>  #> $nullmodels #> # A tibble: 0 × 2 #> # … with 2 variables: location <chr>, model <chr> formatted_list <- format_for_submission(hosp_fitfor$tsfor) formatted_list #> $arima #> # A tibble: 4,896 × 7 #>    forecast_date target                  target_en…¹ locat…² type  quant…³ value #>    <date>        <chr>                   <date>      <chr>   <chr> <chr>   <chr> #>  1 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      point NA      17    #>  2 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      point NA      21    #>  3 2022-12-20    3 wk ahead inc flu hosp 2022-06-18  01      point NA      20    #>  4 2022-12-20    4 wk ahead inc flu hosp 2022-06-25  01      point NA      22    #>  5 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      quan… 0.010   0     #>  6 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      quan… 0.010   3     #>  7 2022-12-20    3 wk ahead inc flu hosp 2022-06-18  01      quan… 0.010   1     #>  8 2022-12-20    4 wk ahead inc flu hosp 2022-06-25  01      quan… 0.010   3     #>  9 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      quan… 0.025   2     #> 10 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      quan… 0.025   6     #> # … with 4,886 more rows, and abbreviated variable names ¹​target_end_date, #> #   ²​location, ³​quantile #>  #> $ensemble #> # A tibble: 4,896 × 7 #>    forecast_date target                  target_en…¹ locat…² type  quant…³ value #>    <date>        <chr>                   <date>      <chr>   <chr> <chr>   <chr> #>  1 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      point NA      18    #>  2 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      point NA      20    #>  3 2022-12-20    3 wk ahead inc flu hosp 2022-06-18  01      point NA      20    #>  4 2022-12-20    4 wk ahead inc flu hosp 2022-06-25  01      point NA      20    #>  5 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      quan… 0.010   0     #>  6 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      quan… 0.010   1     #>  7 2022-12-20    3 wk ahead inc flu hosp 2022-06-18  01      quan… 0.010   0     #>  8 2022-12-20    4 wk ahead inc flu hosp 2022-06-25  01      quan… 0.010   0     #>  9 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      quan… 0.025   3     #> 10 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      quan… 0.025   4     #> # … with 4,886 more rows, and abbreviated variable names ¹​target_end_date, #> #   ²​location, ³​quantile #>  #> $ets #> # A tibble: 4,896 × 7 #>    forecast_date target                  target_en…¹ locat…² type  quant…³ value #>    <date>        <chr>                   <date>      <chr>   <chr> <chr>   <chr> #>  1 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      point NA      19    #>  2 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      point NA      19    #>  3 2022-12-20    3 wk ahead inc flu hosp 2022-06-18  01      point NA      19    #>  4 2022-12-20    4 wk ahead inc flu hosp 2022-06-25  01      point NA      19    #>  5 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      quan… 0.010   0     #>  6 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      quan… 0.010   0     #>  7 2022-12-20    3 wk ahead inc flu hosp 2022-06-18  01      quan… 0.010   0     #>  8 2022-12-20    4 wk ahead inc flu hosp 2022-06-25  01      quan… 0.010   0     #>  9 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  01      quan… 0.025   2     #> 10 2022-12-20    2 wk ahead inc flu hosp 2022-06-11  01      quan… 0.025   1     #> # … with 4,886 more rows, and abbreviated variable names ¹​target_end_date, #> #   ²​location, ³​quantile validate_forecast(formatted_list$ensemble) plot_forecast(prepped_hosp, formatted_list$ensemble, loc=\"US\", pi = .5) plot_forecast(prepped_hosp, formatted_list$ensemble, loc=\"36\", pi = .5) plot_forecast(prepped_hosp, formatted_list$ensemble, loc=\"12\", pi = .5) hosp_fitfor$tsfit$arima %>%    map(\"fit\") %>%    map_df(\"spec\") %>%    mutate(location = hosp_fitfor$tsfit$location, .before = \"p\") #> # A tibble: 51 × 9 #>    location     p     d     q     P     D     Q constant period #>    <chr>    <int> <int> <dbl> <dbl> <dbl> <dbl> <lgl>     <dbl> #>  1 01           2     0     0     0     0     0 TRUE         52 #>  2 02           1     0     0     0     0     0 TRUE         52 #>  3 04           2     1     0     0     0     0 FALSE        52 #>  4 05           2     1     0     0     0     0 FALSE        52 #>  5 06           2     2     0     0     0     0 FALSE        52 #>  6 08           1     1     0     0     0     0 FALSE        52 #>  7 09           1     1     0     0     0     0 FALSE        52 #>  8 10           2     1     0     0     0     0 FALSE        52 #>  9 12           2     2     0     0     0     0 FALSE        52 #> 10 13           2     1     0     0     0     0 FALSE        52 #> # … with 41 more rows"},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"count-regression-forecasting","dir":"Articles","previous_headings":"Usage","what":"Count regression forecasting","title":"Basic Usage","text":"time series methods assume outcome continuous distribution. forecasting counts especially small counts (e.g., “many influenza hospitalizations occur next week Hawaii?”) alternative methods may desirable properties. fiphde provides functionality leverage count regression models forecasting influenza hospitalizations. demonstrate implement count regression modeling approach. example step process forecasting hospitalizations Hawaii using influenza-like illness (ILI) indicators historical hospitalization ILI severity given epidemiological weeks. usage illustrates automated tuning procedure finds “best” models possible covariates model families (e.g., Poisson, Quasipoisson, Negative binomial, etc.).","code":""},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"ili-retrieval-and-prep","dir":"Articles","previous_headings":"Usage > Count regression forecasting","what":"ILI retrieval and prep","title":"Basic Usage","text":"Given ILI covariate count regression model, must first retrieve ILI data using get_cdc_ili() function, wrapper around ilinet(). , ’re using recent ILI data (.e., since 2019) filter signal include Hawaii. ILI subject revision may less reliable initially reported, replace current week one week previous Nowcast data. Finally, fit time series model forecast ILI next four weeks. next step going log transform weighted ILI flu admissions, step need remove zeros. fiphde package provides mnz_replace function replaces zeros variable smallest non-zero value variable. Finally, create modeling dataset combining flu admission data prepared forecasted ILI data future weeks together historical severity data epidemiological week.","code":"ilidat <-    get_cdc_ili(region=c(\"state\"), years=2019:2022) %>%   filter(region == \"Hawaii\") %>%   replace_ili_nowcast(., weeks_to_replace=1)  ilifor <- forecast_ili(ilidat, horizon=4L, trim_date=\"2020-03-01\", stepwise=FALSE, approximation=FALSE) ilidat <- ilidat %>% mutate(weighted_ili=mnz_replace(weighted_ili))  ilifor$ilidat <- ilifor$ilidat %>% mutate(ili=mnz_replace(ili)) ilifor$ili_future <- ilifor$ili_future %>% mutate(ili=mnz_replace(ili)) ilifor$ili_bound <- ilifor$ili_bound  %>% mutate(ili=mnz_replace(ili)) dat_hi <-   prepped_hosp %>%   filter(abbreviation==\"HI\") %>%   dplyr::mutate(date = MMWRweek::MMWRweek2Date(epiyear, epiweek)) %>%   left_join(ilifor$ilidat, by = c(\"epiyear\", \"location\", \"epiweek\")) %>%   mutate(ili = log(ili)) dat_hi #> # A tibble: 84 × 15 #>    abbreviation locat…¹ week_start monday     week_end   epiyear epiweek flu.a…² #>    <chr>        <chr>   <date>     <date>     <date>       <dbl>   <dbl>   <dbl> #>  1 HI           15      2020-10-18 2020-10-19 2020-10-24    2020      43       0 #>  2 HI           15      2020-10-25 2020-10-26 2020-10-31    2020      44       0 #>  3 HI           15      2020-11-01 2020-11-02 2020-11-07    2020      45       0 #>  4 HI           15      2020-11-08 2020-11-09 2020-11-14    2020      46       0 #>  5 HI           15      2020-11-15 2020-11-16 2020-11-21    2020      47       0 #>  6 HI           15      2020-11-22 2020-11-23 2020-11-28    2020      48       1 #>  7 HI           15      2020-11-29 2020-11-30 2020-12-05    2020      49       0 #>  8 HI           15      2020-12-06 2020-12-07 2020-12-12    2020      50       0 #>  9 HI           15      2020-12-13 2020-12-14 2020-12-19    2020      51       0 #> 10 HI           15      2020-12-20 2020-12-21 2020-12-26    2020      52       0 #> # … with 74 more rows, 7 more variables: flu.admits.cov <dbl>, ili_mean <dbl>, #> #   ili_rank <int>, hosp_mean <dbl>, hosp_rank <int>, date <date>, ili <dbl>, #> #   and abbreviated variable names ¹​location, ²​flu.admits"},{"path":"https://signaturescience.github.io/fiphde/articles/basic_usage.html","id":"fit-a-model-and-forecast-1","dir":"Articles","previous_headings":"Usage > Count regression forecasting","what":"Fit a model and forecast","title":"Basic Usage","text":"First create list different count regression models fit. can inspect formulations model. Note models specified using trending package internally trendeval package used determine best fitting approach. must next project covariates four weeks future, can accomplish pulling forecasted ILI historical severity data. Next use fiphde’s glm_wrap function attempts find best-fitting model models supplied, specifies prediction interval quantiles used FluSight. can take quick look forecast output well different aspects final fitted model. Next prepare data quantile format used FluSight. Finally, can visualize forecasted point estimates 90% prediction interval alongside observed data.","code":"models <-   list(     poisson = trending::glm_model(flu.admits ~ ili + hosp_rank + ili_rank, family = \"poisson\"),     quasipoisson = trending::glm_model(flu.admits ~ ili + hosp_rank + ili_rank, family = \"quasipoisson\"),     negbin = trending::glm_nb_model(flu.admits ~ ili + hosp_rank + ili_rank)   ) models$poisson #> $model_class #> [1] \"glm\" #>  #> $fit #> function (data)  #> { #>     model <- glm(formula = flu.admits ~ ili + hosp_rank + ili_rank,  #>         family = \"poisson\", data = data, ...) #>     model_fit(model, data) #> } #> <environment: 0x563d2f7c24a8> #>  #> attr(,\"class\") #> [1] \"trending_glm\"   \"trending_model\" models$quasipoisson #> $model_class #> [1] \"glm\" #>  #> $fit #> function (data)  #> { #>     model <- glm(formula = flu.admits ~ ili + hosp_rank + ili_rank,  #>         family = \"quasipoisson\", data = data, ...) #>     model_fit(model, data) #> } #> <environment: 0x563d2f7f0be0> #>  #> attr(,\"class\") #> [1] \"trending_glm\"   \"trending_model\" models$negbin #> $model_class #> [1] \"MASS::glm.nb\" #>  #> $fit #> function (data)  #> { #>     model <- MASS::glm.nb(formula = flu.admits ~ ili + hosp_rank +  #>         ili_rank, data = data, ...) #>     model_fit(model, data) #> } #> <environment: 0x563d2f826820> #>  #> attr(,\"class\") #> [1] \"trending_glm_nb\" \"trending_model\" new_cov <-   ilifor$ili_future %>%   left_join(fiphde:::historical_severity, by=\"epiweek\") %>%   select(-epiweek,-epiyear) %>%   mutate(ili = log(ili)) new_cov #> # A tibble: 4 × 6 #>   location   ili ili_mean ili_rank hosp_mean hosp_rank #>   <chr>    <dbl>    <dbl>    <int>     <dbl>     <int> #> 1 15       0.655    1.02        12         0         0 #> 2 15       0.634    0.984       10         0         0 #> 3 15       0.642    0.946        9         0         0 #> 4 15       0.644    0.921        8         0         0 res <- glm_wrap(dat_hi,                 new_covariates = new_cov,                 .models = models,                 alpha = c(0.01, 0.025, seq(0.05, 0.5, by = 0.05)) * 2) res$forecasts$location <- \"15\" head(res$forecasts) #>   epiweek epiyear quantile value location #> 1      22    2022    0.010     0       15 #> 2      22    2022    0.025     0       15 #> 3      22    2022    0.050     0       15 #> 4      22    2022    0.100     0       15 #> 5      22    2022    0.150     1       15 #> 6      22    2022    0.200     1       15 res$model #> # A tibble: 2 × 4 #>   model_class fit        location data$fit_data      #>   <chr>       <trndng__> <chr>    <list>             #> 1 glm         <glm>      15       <tibble [84 × 15]> #> 2 glm         <fn>       15       <tibble [84 × 15]> res$model$fit #> $fitted_model #>  #> Call:  glm(formula = flu.admits ~ ili + hosp_rank + ili_rank, family = \"poisson\",  #>     data = data) #>  #> Coefficients: #> (Intercept)          ili    hosp_rank     ili_rank   #>   -0.110528     1.463418    -0.051589     0.003076   #>  #> Degrees of Freedom: 83 Total (i.e. Null);  80 Residual #> Null Deviance:       229.6  #> Residual Deviance: 175.6     AIC: 234 #>  #> $predict #> function (newdata, alpha = 0.05, add_pi = TRUE, simulate_pi = TRUE,  #>     uncertain = TRUE)  #> { #>     if (missing(newdata)) { #>         newdata <- data[all.vars(formula(model))] #>     } #>     result <- add_confidence_interval(model, newdata, alpha) #>     if (add_pi) { #>         if (simulate_pi) { #>             result <- add_prediction_interval(model, result,  #>                 alpha, simulate_pi, uncertain) #>         } #>         else { #>             result <- add_prediction_interval(model, result,  #>                 alpha, simulate_pi, uncertain) #>         } #>     } #>     result #> } #> <bytecode: 0x563d2a5758a8> #> <environment: 0x563d2b0ccf08> #>  #> attr(,\"class\") #> [1] \"trending_model_fit\" \"list\" res$model$fit$fitted_model$family #>  #> Family: poisson  #> Link function: log res$model$fit$fitted_model$coefficients #>  (Intercept)          ili    hosp_rank     ili_rank  #> -0.110527528  1.463417923 -0.051589427  0.003075992 hi_glm_prepped <- format_for_submission(res$forecasts, method=\"CREG\") hi_glm_prepped #> $CREG #> # A tibble: 96 × 7 #>    forecast_date target                  target_en…¹ locat…² type  quant…³ value #>    <date>        <chr>                   <date>      <chr>   <chr> <chr>   <chr> #>  1 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.010   0     #>  2 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.025   0     #>  3 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.050   0     #>  4 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.100   0     #>  5 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.150   1     #>  6 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.200   1     #>  7 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.250   1     #>  8 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.300   1     #>  9 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.350   2     #> 10 2022-12-20    1 wk ahead inc flu hosp 2022-06-04  15      quan… 0.400   2     #> # … with 86 more rows, and abbreviated variable names ¹​target_end_date, #> #   ²​location, ³​quantile plot_forecast(dat_hi, hi_glm_prepped$CREG, location=\"15\", pi=.9)"},{"path":"https://signaturescience.github.io/fiphde/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"VP Nagraj. Author, maintainer. Shakeel Jessa. Author. Chris Hulme-Lowe. Author. Stephen Turner. Author.","code":""},{"path":"https://signaturescience.github.io/fiphde/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nagraj V, Jessa S, Hulme-Lowe C, Turner S (2022). fiphde: Forecasting Influenza Support Public Health Decision Making. R package version 0.3.3, https://signaturescience.github.io/fiphde/.","code":"@Manual{,   title = {fiphde: Forecasting Influenza in Support of Public Health Decision Making},   author = {VP Nagraj and Shakeel Jessa and Chris Hulme-Lowe and Stephen Turner},   year = {2022},   note = {R package version 0.3.3},   url = {https://signaturescience.github.io/fiphde/}, }"},{"path":"https://signaturescience.github.io/fiphde/index.html","id":"fiphde","dir":"","previous_headings":"","what":"Forecasting Influenza in Support of Public Health Decision Making","title":"Forecasting Influenza in Support of Public Health Decision Making","text":"FIPHDE: Forecasting Influenza Support Public Health DEcision Making","code":""},{"path":"https://signaturescience.github.io/fiphde/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forecasting Influenza in Support of Public Health Decision Making","text":"Install FIPHDE GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"signaturescience/fiphde\", build_vignettes = TRUE)"},{"path":"https://signaturescience.github.io/fiphde/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Forecasting Influenza in Support of Public Health Decision Making","text":"get started, see package vignette:","code":"vignette(\"basic_usage\", package=\"fiphde\")"},{"path":"https://signaturescience.github.io/fiphde/reference/clin_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcast clinical laboratory percent positive flu data — clin_nowcast","title":"Nowcast clinical laboratory percent positive flu data — clin_nowcast","text":"function provides naive nowcasting method clinical laboratory percent positive flu data. methodology simply averages last 4 weeks available data uses average value number weeks specified replace. useful given reporting lag NREVSS clinical laboratory percent positive flu data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/clin_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcast clinical laboratory percent positive flu data — clin_nowcast","text":"","code":"clin_nowcast(clin, weeks_to_replace = 1)"},{"path":"https://signaturescience.github.io/fiphde/reference/clin_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcast clinical laboratory percent positive flu data — clin_nowcast","text":"clin Data prepared get_cdc_clin() weeks_to_replace Number retrospective weeks replace nowcast; default 1","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/clin_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nowcast clinical laboratory percent positive flu data — clin_nowcast","text":"tibble formatted returned get_cdc_clin() n recent weeks (n=\"weeks_to_replace\") nowcasted.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/clin_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nowcast clinical laboratory percent positive flu data — clin_nowcast","text":"","code":"if (FALSE) {  ## get data for Texas tx_clin <- get_cdc_clin(region = \"state\") %>% dplyr::filter(location == \"48\")  ## look at most recent observations tx_clin %>% dplyr::arrange(week_start) %>% tail()  ## now augment with default 1 week nowcast tx_clin %>% clin_nowcast(., weeks_to_replace = 1) %>% dplyr::arrange(week_start) %>% tail()  ## and again augmented with 2 week nowcast instead tx_clin %>%  clin_nowcast(., weeks_to_replace = 2) %>%  dplyr::arrange(week_start) %>%  tail()  }"},{"path":"https://signaturescience.github.io/fiphde/reference/dot-mcga.html","id":null,"dir":"Reference","previous_headings":"","what":"Make clean column names — .mcga","title":"Make clean column names — .mcga","text":"helper function used","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/dot-mcga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make clean column names — .mcga","text":"","code":".mcga(tbl)"},{"path":"https://signaturescience.github.io/fiphde/reference/dot-mcga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make clean column names — .mcga","text":"tbl Input tibble columns rename","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/dot-mcga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make clean column names — .mcga","text":"Tibble clean column names","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fiphde: Forecasting Influenza in Support of Public Health Decision Making — fiphde-package","title":"fiphde: Forecasting Influenza in Support of Public Health Decision Making — fiphde-package","text":"Miscellaneous functions retrieving data, creating evaluating time series forecasting models influenza-like illness (ILI) influenza hospitalizations United States.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fiphde: Forecasting Influenza in Support of Public Health Decision Making — fiphde-package","text":"Maintainer: VP Nagraj pnagraj@signaturescience.com (ORCID) Authors: Shakeel Jessa Chris Hulme-Lowe Stephen Turner (ORCID)","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPHDE explorer app launcher — fiphde_launcher","title":"FIPHDE explorer app launcher — fiphde_launcher","text":"explorer app allows user view plots forecasts, inspect tabular output submission files, download subsets forecast submission data. app includes interface interactively select locations include plots, table, download. function wraps shiny::runApp accepts arguments data forecasts plotted, well directory containing submission files, temporarily attached global environment use app session. Additional arguments passed ... inherited runApp.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPHDE explorer app launcher — fiphde_launcher","text":"","code":"fiphde_launcher(.data, submission_dir, app_dir = NULL, ...)"},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPHDE explorer app launcher — fiphde_launcher","text":".data Tibble historical data trend leading forecast submission_dir Full path directory submission files containing forecast submissions explore app_dir Full path directory explorer app; default NULL app directory resolved system.file(\"app\", package=\"fiphde\") ... Additional arguments passed runApp","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/fiphde_launcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPHDE explorer app launcher — fiphde_launcher","text":"function starts shiny app. exit removes objects (see \".data\" \"submission_dir\") temporarily attached used app session.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast categorical targets — forecast_categorical","title":"Forecast categorical targets — forecast_categorical","text":"function takes probabilistic flu hospitalization forecast input converts forecasted values location categorical \"change\" indicator. criteria level (\"large decrease\", \"decrease\", \"stable\", \"increase\", \"large increase\") defined CDC (see link references). algorithm evaluates absolute changes counts rates (per 100k individuals) recently observed week 2 week ahead forecasted horizon. procedure runs independently location, results formatted tabular output includes possible level corresponding probability observed (calculated probabilistic quantiles) every location.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast categorical targets — forecast_categorical","text":"","code":"forecast_categorical(.forecast, .observed)"},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast categorical targets — forecast_categorical","text":".forecast tibble \"submission-ready\" probabilistic flu hospitalization forecast data (.e., tibble contained list element returned format_for_submission) .observed tibble observed flu admission data (.e., tibble output prep_hdgov_hosp)","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast categorical targets — forecast_categorical","text":"Tibble formatted categorical forecasts includes following columns: forecast_date: Date forecast target: Name target forecasted; fixed \"2 wk flu hosp rate change\" location: FIPS code location type: type forecast output; fixed \"category\" type_id: Categorical label; one \"large decrease\", \"decrease\", \"stable\", \"increase\", \"large increase\" value: Probability observing given \"type_id\" given \"location\"","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_categorical.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forecast categorical targets — forecast_categorical","text":"https://github.com/cdcepi/Flusight-forecast-data/blob/master/data-experimental/README.md","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_categorical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast categorical targets — forecast_categorical","text":"","code":"if (FALSE) {  h_raw <- get_hdgov_hosp(limitcols=TRUE) prepped_hosp <- prep_hdgov_hosp(h_raw) prepped_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location)  # Run with default constrained ARIMA, nonseasonal ETS, no NNETAR hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"))  prepped_forecast <- format_for_submission(hosp_fitfor$tsfor, method = \"ts\") forecast_categorical(prepped_forecast$ensemble, prepped_hosp)  }"},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast ILI — forecast_ili","title":"Forecast ILI — forecast_ili","text":"Forecasts ILI specified weeks future. Used downstream modeling.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast ILI — forecast_ili","text":"","code":"forecast_ili(   ilidat,   horizon = 4L,   trim_date = NULL,   models = list(arima = \"PDQ(0,0,0)+pdq(1:2,0:2,0)\"),   ... )"},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast ILI — forecast_ili","text":"ilidat Data returned get_cdc_ili. horizon Optional horizon periods forecasts generated; default 4 trim_date Earliest start date want use ILI data. Default NULL trim. models list model parameters passed ts_fit_forecast. Defaults list(arima=\"PDQ(0,0,0)+pdq(1:2,0:2,0)\". See help ts_fit_forecast. ... arguments passed ts_fit_forecast (passed fable::ARIMA.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast ILI — forecast_ili","text":"named list containing: ilidat: data sent function filtered location trim_date. Select columns returned. ilidat_tsibble: tsibble class object returned running make_tsibble data . ili_fit: fit fabletools::model. ili_forecast: forecast fabletools::forecast specified horizon. ili_future: horizon-number weeks ILI data forecasted future. ili_bound: data 1 bound data 5. arima_params: tibble ARIMA model parameters location (type=\"arima\"). locstats: tibble missing data information locations. removed: tibble locations removed high missing ILI data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forecast ILI — forecast_ili","text":"Currently limited one location .","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/forecast_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast ILI — forecast_ili","text":"","code":"if (FALSE) { # Get data ilidat <- get_cdc_ili(region = c(\"national\", \"state\", \"hhs\"),                       years = 2010:lubridate::year(lubridate::today()))  # Using data only from march 2020 forward, for US only ilidat_us <- ilidat %>% dplyr::filter(location==\"US\") # Replace most recent week with nowcast data, and nowcast last week ilidat_us <- ilidat_us %>% replace_ili_nowcast(weeks_to_replace=1) ilifor_us <- forecast_ili(ilidat_us, horizon=4L, trim_date=\"2020-03-01\") ilifor_us$ili_fit ilifor_us$arima_params ilifor_us$ili_forecast head(ilifor_us$ili_bound) tail(ilifor_us$ili_bound, 10) # Plot library(dplyr) library(ggplot2) theme_set(theme_classic()) ilifor_us$ili_bound %>%   mutate(date=mmwr_week_to_date(epiyear, epiweek)) %>%   filter(date>\"2021-03-01\") %>%   ggplot(aes(date, ili)) +   geom_line(lwd=.3, alpha=.5) +   geom_point(aes(col=forecasted), size=2)  # At the state level ilidat_st <- ilidat %>% dplyr::filter(region_type==\"States\") ilifor_st <- forecast_ili(ilidat_st, horizon=4L, trim_date=\"2019-01-01\",                           models=list(ets=\"season(method='N')\")) ilifor_st$ili_fit ilifor_st$arima_params ilifor_st$ili_forecast head(ilifor_us$ili_bound) tail(ilifor_us$ili_bound, 10) # Plot library(dplyr) library(ggplot2) theme_set(theme_classic()) ilifor_st$ili_bound %>%   mutate(date=mmwr_week_to_date(epiyear, epiweek)) %>%   filter(date>\"2021-08-01\") %>%   ggplot(aes(date, ili, col=forecasted)) +   geom_line(lwd=.3) +   geom_point(aes(col=forecasted), size=.7) +   facet_wrap(~abbreviation, scale=\"free_y\")  ## At the HHS regional level ilidat_hhs <- ilidat %>% dplyr::filter(region_type==\"HHS Regions\") ilifor_hhs <- forecast_ili(ilidat_hhs, horizon=4L, trim_date=\"2020-03-01\") ilifor_hhs$ili_fit ilifor_hhs$arima_params ilifor_hhs$ili_forecast head(ilifor_us$ili_bound) tail(ilifor_us$ili_bound, 10) # Plot library(dplyr) library(ggplot2) theme_set(theme_classic()) ilifor_hhs$ili_bound %>%   mutate(date=mmwr_week_to_date(epiyear, epiweek)) %>%   filter(date>\"2021-08-01\") %>%   ggplot(aes(date, ili, col=forecasted)) +   geom_line(lwd=.3) +   geom_point(aes(col=forecasted), size=.7) +   facet_wrap(~abbreviation, scale=\"free_y\") }"},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":null,"dir":"Reference","previous_headings":"","what":"Format forecasts for submission — format_for_submission","title":"Format forecasts for submission — format_for_submission","text":"function prepares influenza hospitalization forecasts format required submission FluSight.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format forecasts for submission — format_for_submission","text":"","code":"format_for_submission(   .forecasts,   method = \"ts\",   .target = \"wk ahead inc flu hosp\" )"},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format forecasts for submission — format_for_submission","text":".forecasts Forecasts formatted submission; method \"ts\" forecasts ts_fit_forecast; otherwise must tibble forecast output (e.g. output glm_forecast) colum designating \"location\" method Method forecasting; default \"ts\" trigger use ts_format_for_submission internally .target Name target forecast. Default \"wk ahead inc flu hosp\".","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format forecasts for submission — format_for_submission","text":"named list tibbles, one model, formatted submission.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Format forecasts for submission — format_for_submission","text":"https://github.com/cdcepi/Flusight-forecast-data/blob/master/data-forecasts/README.md","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/format_for_submission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format forecasts for submission — format_for_submission","text":"","code":"if (FALSE) { # Get raw data from healthdata.gov h_raw <- get_hdgov_hosp(limitcols=TRUE) ## save(h_raw, file=\"~/Downloads/h_raw.rd\") ## load(file=\"~/Downloads/h_raw.rd\")  # Prep, and make a tsibble prepped_hosp <- prep_hdgov_hosp(h_raw, statesonly=TRUE) prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to only Virginia and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit a model hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # format for submission formatted_list <- format_for_submission(hosp_fitfor$tsfor, method = \"ts\") formatted_list }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_clin.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and prep clinical laboratory percent positive flu data — get_cdc_clin","title":"Retrieve and prep clinical laboratory percent positive flu data — get_cdc_clin","text":"function returns weekly state /national clinical laboratory percent positivity data NREVSS reporting instrument.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_clin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and prep clinical laboratory percent positive flu data — get_cdc_clin","text":"","code":"get_cdc_clin(region = \"both\", years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_clin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and prep clinical laboratory percent positive flu data — get_cdc_clin","text":"region Either \"state\", \"national\", \"\". Defaults \"\" return state national data combined. years vector years retrieve data . CDC data going back 1997. Default value (NULL) retrieves years.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_clin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and prep clinical laboratory percent positive flu data — get_cdc_clin","text":"Tibble prepared data pulled NREVSS, including columns total number positives, percent positive, epiweek, epiyear","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_clin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and prep clinical laboratory percent positive flu data — get_cdc_clin","text":"","code":"if (FALSE) {  ## get all clinical lab flu positivity data all_clin <- get_cdc_clin()  ## or look at a specific location and time ## note: the year \"start\" will begin at the first epiweek of the season ## this example 2021 will weekly data ... ## ... starting at beginning of 2021/22 season ## ... ending the week before start of 2022/23 season va_clin <- get_cdc_clin(region = \"state\", years = 2021) %>% dplyr::filter(location == \"51\")  }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hospitalization data from CDC FluView — get_cdc_hosp","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"Get hospitalization data CDC FluView. See hospitalizations.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"","code":"get_cdc_hosp(years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"years vector years retrieve data (.e. 2014 CDC flu season 2014-2015). CDC data going back 2009 previous flu season. Default value (NULL) retrieves years.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"cdcfluview documentation: https://hrbrmstr.github.io/cdcfluview/index.html#retrieve-ilinet-surveillance-data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_hosp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hospitalization data from CDC FluView — get_cdc_hosp","text":"","code":"if (FALSE) { get_cdc_hosp(years=2019) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ILI data from CDC FluView — get_cdc_ili","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"Get ILI data CDC FluView. See ilinet.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"","code":"get_cdc_ili(region = c(\"national\", \"state\", \"hhs\"), years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"region Either \"state\", \"national\", \"hhs\". Defaults c(\"national\", \"state\", \"hhs\") three. years vector years retrieve data . CDC data going back 1997. Default value (NULL) retrieves years.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"cdcfluview documentation: https://hrbrmstr.github.io/cdcfluview/index.html#retrieve-ilinet-surveillance-data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ILI data from CDC FluView — get_cdc_ili","text":"","code":"if (FALSE) { get_cdc_ili(region=\"national\", years=2021) get_cdc_ili(region=\"hhs\", years=2021) get_cdc_ili(region=\"state\", years=2021) %>% dplyr::filter(abbreviation==\"VA\") get_cdc_ili(region=c(\"national\", \"state\"), years=2021) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vaccination data — get_cdc_vax","title":"Get vaccination data — get_cdc_vax","text":"Get vaccination data cdc.gov endpoint.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vaccination data — get_cdc_vax","text":"","code":"get_cdc_vax(   endpoint = \"https://data.cdc.gov/api/views/k87d-gv3u/rows.csv\",   app_token = Sys.getenv(\"HEALTHDATA_APP_TOKEN\") )"},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vaccination data — get_cdc_vax","text":"endpoint URL cdc.gov endpoint. See references. app_token App token healthdata.gov. NULL might get rate limited. Add entry ~/.Renviron HEALTHDATA_APP_TOKEN=\"tokenhere\" got https://healthdata.gov/profile/edit/developer_settings.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vaccination data — get_cdc_vax","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get vaccination data — get_cdc_vax","text":"API documentation: https://dev.socrata.com/foundry/data.cdc.gov/k87d-gv3u.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_cdc_vax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get vaccination data — get_cdc_vax","text":"","code":"if (FALSE) { d <- get_cdc_vax() d library(ggplot2) d %>%   ggplot(aes(date, cumulative_flu_doses_distributed)) +   geom_line() +   facet_wrap(~season, scale=\"free_x\") +   theme_bw() rm(d) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hospitalization data — get_hdgov_hosp","title":"Get hospitalization data — get_hdgov_hosp","text":"Retrieves hospitalization data healthdata.gov endpoint optional filtering fields, return results nice tibble.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hospitalization data — get_hdgov_hosp","text":"","code":"get_hdgov_hosp(   endpoint = \"https://healthdata.gov/api/views/g62h-syeh/rows.csv\",   app_token = Sys.getenv(\"HEALTHDATA_APP_TOKEN\"),   limitcols = FALSE )"},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hospitalization data — get_hdgov_hosp","text":"endpoint URL healthdata.gov endpoint (see references).. app_token App token healthdata.gov. NULL might get rate limited. Add entry ~/.Renviron HEALTHDATA_APP_TOKEN=\"tokenhere\" got https://healthdata.gov/profile/edit/developer_settings. limitcols Limit columns returned subjectively defined important ones?","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hospitalization data — get_hdgov_hosp","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get hospitalization data — get_hdgov_hosp","text":"API documentation: http://dev.socrata.com/foundry/healthdata.gov/g62h-syeh.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_hdgov_hosp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hospitalization data — get_hdgov_hosp","text":"","code":"if (FALSE) { get_hdgov_hosp(limitcols=TRUE) get_hdgov_hosp(mindate=\"2021-11-01\", limitrows=10, limitcols=FALSE) get_hdgov_hosp(state=\"VA\") get_hdgov_hosp(state=\"VA\", mindate=\"2021-10-01\") get_hdgov_hosp(state=\"VA\", mindate=\"2021-10-01\", maxdate=\"2021-10-31\") get_hdgov_hosp(state=\"VA\", mindate=\"2021-10-01\", maxdate=\"2021-11-21\", limitrows=5) }"},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ILI nowcast — get_nowcast_ili","title":"Get ILI nowcast — get_nowcast_ili","text":"Get ILI nowcast CMU Delphi ILI Nearby. See examples.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ILI nowcast — get_nowcast_ili","text":"","code":"get_nowcast_ili(   epiyearweeks = NULL,   dates = lubridate::today() - c(14, 7),   state = NULL,   boundatzero = TRUE )"},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ILI nowcast — get_nowcast_ili","text":"epiyearweeks vector epiyear-epiweeks retrieve data , e.g., 202150, 202151, etc. Exclusive dates dates vector dates retrieve data , e.g., \"\"2021-12-12\" \"2021-12-19\". Exclusive epiyearweek. Defaults two weeks prior. state vector states retrieve (two-letter abbreviation). Default NULL retrieves states, national, hhs regions. See examples. boundatzero Bound nowcasts zero? defaults TRUE.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ILI nowcast — get_nowcast_ili","text":"tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get ILI nowcast — get_nowcast_ili","text":"https://delphi.cmu.edu/nowcast/","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/get_nowcast_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ILI nowcast — get_nowcast_ili","text":"","code":"if (FALSE) { # Defaults to the previous two weeks for all states get_nowcast_ili()  # Otherwise specify one or the other, not both get_nowcast_ili(epiyearweeks=c(\"202150\", \"202151\"), dates=NULL) get_nowcast_ili(epiyearweeks=NULL, dates=c(\"2021-12-12\", \"2021-12-19\"))  # Get just one state for the last years worth of data (back 52 weeks to 1 week) get_nowcast_ili(epiyearweeks=NULL,                 dates=lubridate::today()-seq(52*7, 7, -7),                 state=\"FL\")  # Compare to ilinet library(dplyr) library(ggplot2) ilidat <- get_cdc_ili(years=2021) ilinow <- get_nowcast_ili() ilijoined <-   inner_join(ilidat, ilinow, by = c(\"location\", \"abbreviation\", \"epiyear\", \"epiweek\")) %>%   select(abbreviation, epiyear, epiweek, weighted_ili, weighted_ili_now) ggplot(ilijoined, aes(weighted_ili, weighted_ili_now)) + geom_point() ilijoined %>%   mutate(diff=weighted_ili_now-weighted_ili) %>%   arrange(desc(abs(diff))) }"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit glm models — glm_fit","title":"Fit glm models — glm_fit","text":"helper function used glm_wrap fit list models select best one.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit glm models — glm_fit","text":"","code":"glm_fit(.data, .models)"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit glm models — glm_fit","text":".data Data including explanatory outcome variables needed modeling; must include column \"location\" .models List models defined trending_model objects","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit glm models — glm_fit","text":"tibble containing characteristics \"best\" glm model (.e., model \".models\" list lowest RMSE). columns tibble include: model_class: \"type\" model best fit fit: fitted model object best fit location: geographic data: Original model fit data tibble list column","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast glm models — glm_forecast","title":"Forecast glm models — glm_forecast","text":"function uses fitted model object glm_fit future covariate data create probablistic forecasts specific quantiles derived \"alpha\" parameter.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast glm models — glm_forecast","text":"","code":"glm_forecast(   .data,   new_covariates = NULL,   fit,   alpha = c(0.01, 0.025, seq(0.05, 0.45, by = 0.05)) * 2 )"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast glm models — glm_forecast","text":".data Data including explanatory outcome variables needed modeling new_covariates Tibble one column per covariate, n rows n horizons forecasted fit Fitted model object glm_fit alpha Vector specifying threshold(s) used prediction intervals; alpha 0.05 correspond 95% PI; default c(0.01, 0.025, seq(0.05, 0.45, = 0.05)) * 2 range intervals","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast glm models — glm_forecast","text":"Tibble forecasts (quantiles point estimates)","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quantiles from prediction intervals — glm_quibble","title":"Get quantiles from prediction intervals — glm_quibble","text":"function runs predict.trending_model_fit method fitted model specified values \"alpha\" order create range prediction intervals. processing also includes steps convert alpha corresponding quantile values upper lower bounds.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quantiles from prediction intervals — glm_quibble","text":"","code":"glm_quibble(   fit,   new_data,   alpha = c(0.01, 0.025, seq(0.05, 0.45, by = 0.05)) * 2 )"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quantiles from prediction intervals — glm_quibble","text":"fit Fitted model object glm_fit new_data Tibble new data predict.trending_model_fit method run alpha Vector specifying threshold(s) used prediction intervals; alpha 0.05 correspond 95% PI; default c(0.01, 0.025, seq(0.05, 0.45, = 0.05)) * 2 range intervals","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_quibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get quantiles from prediction intervals — glm_quibble","text":"tibble predicted values quantile (lower upper bound value \"alpha\")","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Run glm modeling and forecasting — glm_wrap","title":"Run glm modeling and forecasting — glm_wrap","text":"wrapper function pipelines influenza hospitalization modeling (glm_fit) forecasting (glm_forecast).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run glm modeling and forecasting — glm_wrap","text":"","code":"glm_wrap(   .data,   .models,   new_covariates = NULL,   horizon = 4,   alpha = c(0.01, 0.025, seq(0.05, 0.45, by = 0.05)) * 2 )"},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run glm modeling and forecasting — glm_wrap","text":".data Data including explanatory outcome variables needed modeling .models List models defined trending_model objects new_covariates Tibble one column per covariate, n rows n horizons forecasted horizon Number weeks ahead forecasting alpha Vector specifying threshold(s) used prediction intervals; alpha 0.05 correspond 95% PI; default c(0.01, 0.025, seq(0.05, 0.45, = 0.05)) * 2 range intervals","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/glm_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run glm modeling and forecasting — glm_wrap","text":"Named list two elements: model: Output glm_fit selected model fit forecasts: Output glm_forecast forecasts horizon combined single tibble","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/hospitalizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Laboratory-Confirmed Influenza Hospitalizations — hospitalizations","title":"Laboratory-Confirmed Influenza Hospitalizations — hospitalizations","text":"Adapted cdcfluview::ilinet.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/hospitalizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laboratory-Confirmed Influenza Hospitalizations — hospitalizations","text":"","code":"hospitalizations(   surveillance_area = c(\"flusurv\", \"eip\", \"ihsp\"),   region = \"all\",   years = NULL )"},{"path":"https://signaturescience.github.io/fiphde/reference/hospitalizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laboratory-Confirmed Influenza Hospitalizations — hospitalizations","text":"surveillance_area one \"flusurv\", \"eip\", \"ihsp\" region Using \"\" mimics selecting \"Entire Network\" CDC FluView application drop . Individual regions surveillance area can also selected. Use surveillance_areas() see list valid sub-regions surveillance area. years vector years retrieve data (.e. 2014 CDC flu season 2014-2015). CDC data API going back 2009 previous flu season. Default value (NULL) means retrieve years. NOTE: happen specify 2-digit season value (.e. 56 == 2016-2017) function smart enough retrieve season ID vs convert year.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/hospitalizations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Laboratory-Confirmed Influenza Hospitalizations — hospitalizations","text":"Hospital Portal cdcfluview package","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/hospitalizations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laboratory-Confirmed Influenza Hospitalizations — hospitalizations","text":"","code":"if (FALSE) { hosp_fs <- hospitalizations(\"flusurv\", years=2015) hosp_eip <- hospitalizations(\"eip\") hosp_ihsp <- hospitalizations(\"ihsp\") }"},{"path":"https://signaturescience.github.io/fiphde/reference/ilinet.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ILINet Surveillance Data — ilinet","title":"Retrieve ILINet Surveillance Data — ilinet","text":"Adapted cdcfluview::ilinet.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ilinet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ILINet Surveillance Data — ilinet","text":"","code":"ilinet(region = c(\"national\", \"hhs\", \"census\", \"state\"), years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/ilinet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ILINet Surveillance Data — ilinet","text":"region one \"national\", \"hhs\", \"census\", \"state\" years vector years retrieve data (.e. 2014 CDC flu season 2014-2015). CDC data API going back 1997. Default value (NULL) means retrieve years. NOTE: happen specify 2-digit season value (.e. 57 == 2017-2018) function smart enough retrieve season ID vs convert year.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ilinet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve ILINet Surveillance Data — ilinet","text":"CDC FluView Portal provides -season past seasons' national, regional, state-level outpatient illness viral surveillance data ILINet (Influenza-like Illness Surveillance Network) /NREVSS (National Respiratory Enteric Virus Surveillance System). function retrieves current historical ILINet surveillance data identified region. function used internally get_cdc_ili() exported.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ilinet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve ILINet Surveillance Data — ilinet","text":"cdcfluview package CDC FluView Portal ILINet Portal (Login required) /NREVSS","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ilinet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve ILINet Surveillance Data — ilinet","text":"","code":"if (FALSE) { national_ili <- ilinet(\"national\", years = 2017) hhs_ili <- ilinet(\"hhs\") census_ili <- ilinet(\"census\") state_ili <- ilinet(\"state\")  all_ili <- suppressWarnings(   suppressMessages(purrr::map_df(c(\"national\", \"hhs\", \"census\", \"state\"), ilinet))) }"},{"path":"https://signaturescience.github.io/fiphde/reference/is_monday.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Monday — is_monday","title":"Check Monday — is_monday","text":"helper function see today Monday.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/is_monday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Monday — is_monday","text":"","code":"is_monday()"},{"path":"https://signaturescience.github.io/fiphde/reference/is_monday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Monday — is_monday","text":"Logical indicating whether today Monday","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Make tsibble — make_tsibble","title":"Make tsibble — make_tsibble","text":"function converts input tibble columns epiyear epiweek tsibble object. tsibble columns specifying indices time series well date Monday epiyear/epiweek combination row.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make tsibble — make_tsibble","text":"","code":"make_tsibble(df, epiyear, epiweek, key = location)"},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make tsibble — make_tsibble","text":"df tibble containing columns epiyear epiweek. epiyear Unquoted variable name containing MMWR epiyear. epiweek Unquoted variable name containing MMWR epiweek. key Unquoted variable name containing name column tsibble key. See tsibble::as_tsibble.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make tsibble — make_tsibble","text":"tsibble containing additional columns monday indicating date Monday epiweek, yweek (yearweek vctr class object) indexes tsibble 1 week increments.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/make_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make tsibble — make_tsibble","text":"","code":"d <- tibble::tibble(epiyear=c(2020, 2020, 2021, 2021),                     epiweek=c(52, 53, 1, 2),                     location=\"US\",                     somedata=101:104) make_tsibble(d, epiyear = epiyear, epiweek=epiweek, key=location) #> # A tsibble: 4 x 6 [1W] #> # Key:       location [1] #>   epiyear epiweek monday        yweek location somedata #>     <dbl>   <dbl> <date>       <week> <chr>       <int> #> 1    2020      52 2020-12-21 2020 W52 US            101 #> 2    2020      53 2020-12-28 2020 W53 US            102 #> 3    2021       1 2021-01-04 2021 W01 US            103 #> 4    2021       2 2021-01-11 2021 W02 US            104"},{"path":"https://signaturescience.github.io/fiphde/reference/mmwr_week_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","title":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","text":"Adapted cdcfluview::mmwr_week_to_date. reformat re-export function MMWRweek package. provides snake case version counterpart produces vector Date objects corresponds input MMWR year+week year+week+day vectors. also adds parameter checking cleanup avoid exceptions.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mmwr_week_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","text":"","code":"mmwr_week_to_date(year, week, day = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/mmwr_week_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","text":"year, week, day Year, week month vectors. must length unless day NULL.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mmwr_week_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","text":"vector Date objects","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mmwr_week_to_date.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","text":"cdcfluview package","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mmwr_week_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an MMWR year+week or year+week+day to a Date object — mmwr_week_to_date","text":"","code":"mwd <- mmwr_week_to_date(2016,10,3)"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum non-zero — mnz","title":"Minimum non-zero — mnz","text":"Get minimum non-zero positive value vector.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum non-zero — mnz","text":"","code":"mnz(x)"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum non-zero — mnz","text":"x numeric vector","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum non-zero — mnz","text":"minimum non-zero positive value x.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/reference/mnz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum non-zero — mnz","text":"","code":"x <- c(.1, 0, -.2, NA, .3, .4, .0001, -.3, NA, 999) x #>  [1]   0.1000   0.0000  -0.2000       NA   0.3000   0.4000   0.0001  -0.3000 #>  [9]       NA 999.0000 mnz(x) #> [1] 1e-04"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum non-zero replacement — mnz_replace","title":"Minimum non-zero replacement — mnz_replace","text":"Replace zeros negative values minimum non-zero positive value vector.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum non-zero replacement — mnz_replace","text":"","code":"mnz_replace(x)"},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum non-zero replacement — mnz_replace","text":"x numeric vector","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum non-zero replacement — mnz_replace","text":"vector length negatives zeros replaced minimum nonzero value vector.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/mnz_replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum non-zero replacement — mnz_replace","text":"","code":"x <- c(.1, 0, -.2, NA, .3, .4, .0001, -.3, NA, 999) x #>  [1]   0.1000   0.0000  -0.2000       NA   0.3000   0.4000   0.0001  -0.3000 #>  [9]       NA 999.0000 mnz(x) #> [1] 1e-04 mnz_replace(x) #>  [1]   0.1000   0.0001   0.0001       NA   0.3000   0.4000   0.0001   0.0001 #>  [9]       NA 999.0000 tibble::tibble(x) %>% dplyr::mutate(x2=mnz_replace(x)) #> # A tibble: 10 × 2 #>           x       x2 #>       <dbl>    <dbl> #>  1   0.1      0.1    #>  2   0        0.0001 #>  3  -0.2      0.0001 #>  4  NA       NA      #>  5   0.3      0.3    #>  6   0.4      0.4    #>  7   0.0001   0.0001 #>  8  -0.3      0.0001 #>  9  NA       NA      #> 10 999      999"},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot forecasts — plot_forecast","title":"Plot forecasts — plot_forecast","text":"function serves plotting mechanism prepped forecast submission data. Using truth data supplied, plots show historical trajectory weekly flu hospitalizations along point estimates forecasts. Optionally, user can include 95% prediction interval well. Plots include trajectories weekly flu hospitalizations faceted location.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot forecasts — plot_forecast","text":"","code":"plot_forecast(   .data,   submission,   location = \"US\",   pi = 0.95,   .model = NULL,   .outcome = \"flu.admits\" )"},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot forecasts — plot_forecast","text":".data Historical truth data locations outcomes submission targets submission Formatted submission location Vector specifying locations filter ; 'US' default. pi Width prediction interval plot; default 0.95 95% PI; set NULL PI plotted .model Name model used generate forecasts; default NULL name model assumed stored column called \"model\" formatted submission file .outcome name outcome variable plotting historical data. Defaults \"flu.admits\". may also \"weighted_ili\".","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot forecasts — plot_forecast","text":"ggplot2 plot object line plots outcome trajectories faceted location","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/plot_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot forecasts — plot_forecast","text":"","code":"if (FALSE) { # Get some data h_raw <- get_hdgov_hosp(limitcols=TRUE) ## save(h_raw, file=\"~/Downloads/h_raw.rd\") ## load(file=\"~/Downloads/h_raw.rd\")  # Prep all the data prepped_hosp_all <- prep_hdgov_hosp(h_raw)  # What are the last four weeks of recorded data? last4 <-   prepped_hosp_all %>%   dplyr::distinct(week_start) %>%   dplyr::arrange(week_start) %>%   tail(4)  #remove those prepped_hosp <-   prepped_hosp_all %>%   dplyr::anti_join(last4, by=\"week_start\")  # Make a tsibble prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to just one state and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit models and forecasts hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                trim_date=NULL,                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # Format for submission hosp_formatted <- ts_format_for_submission(hosp_fitfor$tsfor)  # Plot with current and all data plot_forecast(prepped_hosp, hosp_formatted$ensemble) plot_forecast(prepped_hosp_all, hosp_formatted$ensemble) plot_forecast(prepped_hosp, hosp_formatted$ensemble, location=c(\"US\", \"51\")) plot_forecast(prepped_hosp_all, hosp_formatted$ensemble, location=c(\"US\", \"51\")) plot_forecast(prepped_hosp, hosp_formatted$ets) plot_forecast(prepped_hosp_all, hosp_formatted$ets) plot_forecast(prepped_hosp, hosp_formatted$arima) plot_forecast(prepped_hosp_all, hosp_formatted$arima)  # Demonstrating multiple models prepped_hosp <-   h_raw %>%   prep_hdgov_hosp(statesonly=TRUE, min_per_week = 0, remove_incomplete = TRUE) %>%   dplyr::filter(abbreviation != \"DC\")  tsens_20220110 <- readr::read_csv(here::here(\"submission/SigSci-TSENS/2022-01-10-SigSci-TSENS.csv\")) creg_20220110 <- readr::read_csv(here::here(\"submission/SigSci-CREG/2022-01-10-SigSci-CREG.csv\")) combo_20220110 <- dplyr::bind_rows(   dplyr::mutate(tsens_20220110, model = \"SigSci-TSENS\"),   dplyr::mutate(creg_20220110, model = \"SigSci-CREG\") ) plot_forecast(prepped_hosp, combo_20220110, location = \"24\") plot_forecast(prepped_hosp, tsens_20220110, location = \"24\") plot_forecast(prepped_hosp, combo_20220110, location = c(\"34\",\"36\")) plot_forecast(prepped_hosp, creg_20220110, location = \"US\", .model = \"SigSci-CREG\") plot_forecast(prepped_hosp, creg_20220110, location = \"US\", .model = \"SigSci-CREG\")  ## demonstrating different prediction interval widths plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = 0.5) plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = 0.9) plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = 0.95) plot_forecast(prepped_hosp, combo_20220110, location = \"24\", pi = NULL) }"},{"path":"https://signaturescience.github.io/fiphde/reference/pois_forc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Poisson count forecaster — pois_forc","title":"Simple Poisson count forecaster — pois_forc","text":"function helper forecasts Poisson counts 4 near-term horizons based characteristics recently observed count data. function effectively takes rolling average last 4 observations (augmenting forecasted horizon horizons progress), uses average parameter Lambda random draw Poisson distribution.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pois_forc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Poisson count forecaster — pois_forc","text":"","code":"pois_forc(.data, .location, .var)"},{"path":"https://signaturescience.github.io/fiphde/reference/pois_forc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Poisson count forecaster — pois_forc","text":".data Data frame incoming data includes variable counts (see \".var\" argument), location (must stored column called \"location\") variable sorting date (must stored column called \"week_start\") .location name location interest .var Bare, unquoted name variable counts forecasted","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pois_forc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Poisson count forecaster — pois_forc","text":"Vector length 4 Poisson forecasts 4 horizons ahead.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/pois_forc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Poisson count forecaster — pois_forc","text":"","code":"if (FALSE) {  all_clin <- get_cdc_clin() va_ahead <- dplyr::tibble( n_positive = pois_forc(all_clin, .location = \"51\", n_positive), total = pois_forc(all_clin, .location = \"51\", total), p_positive = n_positive / total )  va_ahead  }"},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep hospitalization data — prep_hdgov_hosp","title":"Prep hospitalization data — prep_hdgov_hosp","text":"Prep healthdata.gov hospitalization data retrieved using get_hdgov_hosp downstream forecasting. Limits states , trims data, removes incomplete week, removes locations little reporting last month.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep hospitalization data — prep_hdgov_hosp","text":"","code":"prep_hdgov_hosp(   hdgov_hosp,   statesonly = TRUE,   trim = list(epiyear = 2020, epiweek = 43),   remove_incomplete = TRUE,   min_per_week = 1 )"},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep hospitalization data — prep_hdgov_hosp","text":"hdgov_hosp Raw hospitalization data get_hdgov_hosp statesonly Limit US+DC+States (.e., drop territories)? Defaults TRUE. trim list epiyear epiweek trim . Defaults October 25, 2020 (2020:43). data . remove_incomplete Remove last week incomplete? Defaults TRUE. min_per_week minimum number flu.admits per week needed retain state. Default removes states less 1 flu admission per week last 30 days.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep hospitalization data — prep_hdgov_hosp","text":"tibble; hospitalization data ready downstream forecasting.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/prep_hdgov_hosp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep hospitalization data — prep_hdgov_hosp","text":"","code":"if (FALSE) { hdgov_hosp <- get_hdgov_hosp(limitcols=TRUE) h <- prep_hdgov_hosp(hdgov_hosp) h hts <- make_tsibble(h, epiyear=epiyear, epiweek=epiweek, key=location) hts }"},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace ILInet with nowcast data — replace_ili_nowcast","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"Replaces weighted_ili get_cdc_ili nowcast data get_nowcast_ili number specified weeks_to_replace.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"","code":"replace_ili_nowcast(   ilidat,   start_date = NULL,   weeks_to_replace = 1,   fallback = TRUE )"},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"ilidat Data get_cdc_ili. start_date Date start nowcasting. Defaults lubridate::today. weeks_to_replace Number weeks ilidat replace. Defaults 2. fallback Logical whether fall back pseudo nowcast (average last 4 ILI weeks given location) nowcast data unavailable; default TRUE","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"ilidat input, weeks_to_replace weeks replaced nowcasted data.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/replace_ili_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace ILInet with nowcast data — replace_ili_nowcast","text":"","code":"if (FALSE) { ilidat <- get_cdc_ili(years=2021) ilidat <-   ilidat %>%   dplyr::filter(location==\"US\" | abbreviation==\"VA\") %>%   dplyr::group_by(location) %>%   dplyr::slice_max(week_start, n=4) %>%   dplyr::select(location:weighted_ili) ilidat iliaug <- replace_ili_nowcast(ilidat, weeks_to_replace=1) iliaug  # arrange for comparison ilidat <- ilidat %>% dplyr::arrange(location, week_start) iliaug <- iliaug %>% dplyr::arrange(location, week_start) # Compare US waldo::compare(ilidat %>% dplyr::filter(location==\"US\"),                iliaug %>% dplyr::filter(location==\"US\")) # Compare VA waldo::compare(ilidat %>% dplyr::filter(location==\"51\"),                iliaug %>% dplyr::filter(location==\"51\")) }"},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":null,"dir":"Reference","previous_headings":"","what":"Score function parameter checker — score_func_param_checker","title":"Score function parameter checker — score_func_param_checker","text":"Unexported utility function check parameters score function. See weighted_interval_score.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score function parameter checker — score_func_param_checker","text":"","code":"score_func_param_checker(quantiles, values, actual_value, id = \"\")"},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score function parameter checker — score_func_param_checker","text":"quantiles vector forecasted quantiles values vector forecasted values actual_value Actual value. id name score function, e.g. \"weighted_interval_score\".","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/score_func_param_checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score function parameter checker — score_func_param_checker","text":"Nothing. Called side effects.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/smoothie.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate smoothed and weighted averages of previous observations — smoothie","title":"Calculate smoothed and weighted averages of previous observations — smoothie","text":"helper function calculates weighted average last n observations.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/smoothie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate smoothed and weighted averages of previous observations — smoothie","text":"","code":"smoothie(x, n = 4, weights = c(1, 2, 3, 4))"},{"path":"https://signaturescience.github.io/fiphde/reference/smoothie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate smoothed and weighted averages of previous observations — smoothie","text":"x Incoming vector observations n Number recent observations smooth; default 4 weights Vector weights applied last n observations averaging","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/smoothie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate smoothed and weighted averages of previous observations — smoothie","text":"Vector length 1 weighted average last n observations.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/smoothie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate smoothed and weighted averages of previous observations — smoothie","text":"","code":"if (FALSE) {  ## pull and prep weekly US flu hospitalization data hosp_us <- get_hdgov_hosp() %>% prep_hdgov_hosp() %>% dplyr::filter(location == \"US\")  ## what do the last 4 observations look like? tail(hosp_us$flu.admits, 4)  ## smooth over last 4 with default weights smoothie(hosp_us$flu.admits, n=4, weights=c(1,2,3,4))  ## try smoothing over last 4 with different weights (exponential this time) smoothie(hosp_us$flu.admits, n=4, weights=exp(1:4))  }"},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"Replaces weighted_ili get_cdc_ili nowcast data get_nowcast_ili dates specified location. useful getting data states ILI data missing (e.g., Florida).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"","code":"state_replace_ili_nowcast_all(   ilidat,   state,   impute = TRUE,   fallback = TRUE,   ... )"},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"ilidat Data get_cdc_ili. state Two-letter state abbreviation replace completely impute Logical; try mean impute missing values using immediately preceding following values. See examples. fallback Logical whether fall back pseudo nowcast (average last 4 ILI weeks given location) nowcast data unavailable; default TRUE ... arguments passed get_nowcast_ili, e.g. boundatzero, TRUE default.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"ilidat input, state's data get_cdc_ili replaced nowcast data get_nowcast_ili.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"replaces instances weighted_ili specified state weighted_ili NA. ILI data FL missing, .","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/reference/state_replace_ili_nowcast_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace all ILInet data with nowcast data for a state — state_replace_ili_nowcast_all","text":"","code":"if (FALSE) { ilidat <- get_cdc_ili(years=2020) ilidat <-   ilidat %>%   dplyr::filter(location==\"US\" | abbreviation==\"VA\" | abbreviation==\"FL\") %>%   dplyr::group_by(location) %>%   dplyr::slice_max(week_start, n=4) %>%   dplyr::select(location:weighted_ili) %>%   dplyr::arrange(location, epiyear, epiweek) ilidat state_replace_ili_nowcast_all(ilidat, state=\"FL\") # Example with Florida, which has a negative value for nowcasted ILI ilidat <- get_cdc_ili(years=2019) ilidat <- ilidat %>%   dplyr::filter(location==\"US\" | abbreviation==\"VA\" | abbreviation==\"FL\") %>%   dplyr::filter(epiyear==2020 & epiweek %in% c(20, 21, 22)) %>%   dplyr::select(location:weighted_ili) %>%   dplyr::arrange(location, epiyear, epiweek) ilidat # defaults to bound at zero state_replace_ili_nowcast_all(ilidat, state=\"FL\") # show results when you don't bound at zero state_replace_ili_nowcast_all(ilidat, state=\"FL\", boundatzero=FALSE) # example with missing data in florida ilidat <- get_cdc_ili(region=c(\"national\",\"state\"), years=2019:lubridate::year(lubridate::today())) ilidat <- ilidat %>%   dplyr::filter(abbreviation==\"FL\") %>%   dplyr::filter(week_start>=\"2020-12-13\" & week_start<=\"2021-01-10\") ilidat state_replace_ili_nowcast_all(ilidat, state=\"FL\") state_replace_ili_nowcast_all(ilidat, state=\"FL\", impute=FALSE) }"},{"path":"https://signaturescience.github.io/fiphde/reference/surveillance_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a list of valid sub-regions for each surveillance area. — surveillance_areas","title":"Retrieve a list of valid sub-regions for each surveillance area. — surveillance_areas","text":"Retrieve list valid sub-regions surveillance area.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/surveillance_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a list of valid sub-regions for each surveillance area. — surveillance_areas","text":"","code":"surveillance_areas()"},{"path":"https://signaturescience.github.io/fiphde/reference/surveillance_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a list of valid sub-regions for each surveillance area. — surveillance_areas","text":"","code":"sa <- surveillance_areas()"},{"path":"https://signaturescience.github.io/fiphde/reference/this_monday.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Monday — this_monday","title":"Get Monday — this_monday","text":"function helper get date Monday current week. function determines current week based epidemiogical week orientation (.e., week begins Sunday).","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/this_monday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Monday — this_monday","text":"","code":"this_monday()"},{"path":"https://signaturescience.github.io/fiphde/reference/this_monday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Monday — this_monday","text":"Date Monday current week. details see floor_date.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean numeric values — to_num","title":"Clean numeric values — to_num","text":"helper function used ilinet() function strip special characters empty space convert vector numeric.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean numeric values — to_num","text":"","code":"to_num(x)"},{"path":"https://signaturescience.github.io/fiphde/reference/to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean numeric values — to_num","text":"x Input character vector special characters stripped converted","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean numeric values — to_num","text":"Numeric vector","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and forecast with time-series approaches. — ts_fit_forecast","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"Fit forecast time-series approaches.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"","code":"ts_fit_forecast(   prepped_tsibble,   outcome = \"flu.admits\",   horizon = 4L,   trim_date = \"2021-01-01\",   models = list(arima = \"PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)\", ets =     \"season(method=\\\"N\\\")\", nnetar = NULL),   covariates = c(\"hosp_rank\", \"ili_rank\"),   ensemble = TRUE,   remove_null_models = TRUE )"},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"prepped_tsibble tsibble data retrieved get_hdgov_hosp, prepped prep_hdgov_hosp, made tsibble make_tsibble. outcome outcome variable model (default \"flu.admits\"). horizon Number weeks ahead trim_date date (YYYY-MM-DD) point ts modeling started. Default \"2021-01-01\". Set NULL stop trimming. models list right hand side formula contents models want run. See examples. Defaults list(arima = \"PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)\", ets = \"season(method='N')\", nnetar = NULL) Setting type model NULL turns model . run unconstrained ARIMA: list(arima='PDQ() + pdq()'). See also fable::ARIMA. run seasonal exponential smoothing: list(ets='season(method=c(\"\", \"M\", \"N\"), period=\"3 months\")'). See also fable::ETS. run autoregressive neural net P=1: list(nnetar=\"AR(P=1)\"). See also fable::NNETAR. covariates Covariates modeled time series. Defaults c(\"hosp_rank\", \"ili_rank\"), historical data brought prep_hdgov_hosp. ensemble ARIMA ETS models ensembled? Default TRUE. remove_null_models null models removed? Default TRUE.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"list time series fit, time series forecast, model formulas. tsfit: mdl_df class \"mable\" one row location, columns arima ets models. tsfor: fbl_ts class \"fable\" one row per location-model-timepoint horizon number time points. formulas: list ARIMA, ETS, /NNETAR formulas","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_fit_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and forecast with time-series approaches. — ts_fit_forecast","text":"","code":"if (FALSE) { h_raw <- get_hdgov_hosp(limitcols=TRUE) ## save(h_raw, file=\"~/Downloads/h_raw.rd\") ## load(file=\"~/Downloads/h_raw.rd\") prepped_hosp <- prep_hdgov_hosp(h_raw) prepped_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) prepped_tsibble <-   prepped_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\")) # Run with default constrained ARIMA, nonseasonal ETS, no NNETAR hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\")) # Run an unconstrained ARIMA, seasonal ETS, no NNETAR hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"),                                models=list(arima='PDQ() + pdq()',                                            ets='season(method=c(\"A\", \"M\", \"N\"), period=\"3 months\")',                                            nnetar=NULL)) hosp_fitfor <- ts_fit_forecast(prepped_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"),                                models=list(arima='PDQ() + pdq()',                                            ets='season(method=c(\"A\", \"M\", \"N\"), period=\"3 months\")',                                            nnetar=\"AR(P=1)\")) }"},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":null,"dir":"Reference","previous_headings":"","what":"Format time series forecast — ts_format_for_submission","title":"Format time series forecast — ts_format_for_submission","text":"Format time series forecast submission.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format time series forecast — ts_format_for_submission","text":"","code":"ts_format_for_submission(   tsfor,   .target = \"wk ahead inc flu hosp\",   .counts = TRUE )"},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format time series forecast — ts_format_for_submission","text":"tsfor forecast ts_fit_forecast. .target Name target forecast. Default \"wk ahead inc flu hosp\". .counts Logical. Default TRUE indicates target outcome count, rounded integer.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format time series forecast — ts_format_for_submission","text":"named list tibbles, one model, formatted submission.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format time series forecast — ts_format_for_submission","text":"Uses quantiles c(0.01, 0.025, seq(0.05, 0.95, = 0.05), 0.975, 0.99) built-fiphde:::q, using accessory table fiphde:::quidk. See data-raw/generate-sysdata.R details.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Format time series forecast — ts_format_for_submission","text":"https://github.com/cdcepi/Flusight-forecast-data/blob/master/data-forecasts/README.md","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/ts_format_for_submission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format time series forecast — ts_format_for_submission","text":"","code":"if (FALSE) { # Get raw data from healthdata.gov h_raw <- get_hdgov_hosp(limitcols=TRUE)  # Prep, and make a tsibble prepped_hosp <- prep_hdgov_hosp(h_raw, statesonly=TRUE) prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to only Virginia and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit a model hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # format for submission formatted_list <- ts_format_for_submission(hosp_fitfor$tsfor) formatted_list }"},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate forecast submission — validate_forecast","title":"Validate forecast submission — validate_forecast","text":"function take prepped forecast data run series tests validate format.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate forecast submission — validate_forecast","text":"","code":"validate_forecast(subdat)"},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate forecast submission — validate_forecast","text":"subdat tibble submission ready forecasts prepped stored output format_for_submission","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate forecast submission — validate_forecast","text":"Named list elements test (including logical whether test passed message failed) overall \"valid\" logical TRUE tests passed FALSE least one failed","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/validate_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate forecast submission — validate_forecast","text":"","code":"if (FALSE) { # Get raw data from healthdata.gov h_raw <- get_hdgov_hosp(limitcols=TRUE)  # Prep, and make a tsibble prepped_hosp <- prep_hdgov_hosp(h_raw, statesonly=TRUE) prepped_hosp_tsibble <- make_tsibble(prepped_hosp,                                      epiyear = epiyear,                                      epiweek=epiweek,                                      key=location) # Limit to only Virginia and US prepped_hosp_tsibble <-   prepped_hosp_tsibble %>%   dplyr::filter(location %in% c(\"US\", \"51\"))  # Fit a model hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,                                horizon=4L,                                outcome=\"flu.admits\",                                covariates=c(\"hosp_rank\", \"ili_rank\"))  # format for submission formatted_list <- format_for_submission(hosp_fitfor$tsfor, method = \"ts\") validate_forecast(formatted_list$ets) }"},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted interval score — weighted_interval_score","title":"Compute weighted interval score — weighted_interval_score","text":"Computes weighted interval score (WIS), well-known quantile-based approximation commonly-used continuous ranked probability score (CRPS). WIS proper score, can thought distributional generalization absolute error. example, see Bracher et al. (2020) discussion context COVID-19 forecasting.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted interval score — weighted_interval_score","text":"","code":"weighted_interval_score(quantile, value, actual_value)"},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted interval score — weighted_interval_score","text":"quantile vector forecasted quantiles value vector forecasted values actual_value Actual value.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/weighted_interval_score.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute weighted interval score — weighted_interval_score","text":"https://cmu-delphi.github.io/covidcast/evalcastR/.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/who_nrevss.html","id":null,"dir":"Reference","previous_headings":"","what":"WHO/NREVSS surveillance data — who_nrevss","title":"WHO/NREVSS surveillance data — who_nrevss","text":"Adapted cdcfluview::who_nrevss.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/who_nrevss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WHO/NREVSS surveillance data — who_nrevss","text":"","code":"who_nrevss(region = c(\"national\", \"hhs\", \"census\", \"state\"), years = NULL)"},{"path":"https://signaturescience.github.io/fiphde/reference/who_nrevss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WHO/NREVSS surveillance data — who_nrevss","text":"region one \"national\", \"hhs\", \"census\", \"state\" years vector years retrieve data (.e. 2014 CDC flu season 2014-2015). CDC data API going back 1997. Default value (NULL) means retrieve years. NOTE: happen specify 2-digit season value (.e. 57 == 2017-2018) function smart enough retrieve season ID vs convert year.","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/who_nrevss.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"WHO/NREVSS surveillance data — who_nrevss","text":"cdcfluview package","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/who_nrevss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WHO/NREVSS surveillance data — who_nrevss","text":"","code":"if (FALSE) { national_nrevss <- who_nrevss(\"national\") hhs_who <- who_nrevss(\"hhs\") census_who <- who_nrevss(\"census\") state_who <- who_nrevss(\"state\") }"},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate WIS score — wis_score","title":"Calculate WIS score — wis_score","text":"Helper function calculate weighted interval score (WIS) prepped forecasts","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate WIS score — wis_score","text":"","code":"wis_score(.forecasts, .test)"},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate WIS score — wis_score","text":".forecasts Tibble prepped foreacsts .test Tibble test data including observed value flu admissions stored \"flu.admits\" column","code":""},{"path":"https://signaturescience.github.io/fiphde/reference/wis_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate WIS score — wis_score","text":"Tibble WIS combination epiweek epiyear","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"new-features-0-3-3","dir":"Changelog","previous_headings":"","what":"New features","title":"fiphde 0.3.3","text":"release, introduce forecast_categorical() generate categorical rate change targets. function takes probabilistic forecast input (values expected quantile) converts probability 2 week ahead trend large decrease, decrease, increase, large increase, stable. function implemented fiphde explorer Shiny app (see ?fiphde_launcher()) user can download submission-ready categorical forecasts probabilistic forecast files.","code":""},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"bug-fixes-0-3-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fiphde 0.3.3","text":"plot_forecast() documentation included example outmoded version ts_fit_forecast() API. updated example code runs current version ts_fit_forecast() function.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"new-features-0-3-2","dir":"Changelog","previous_headings":"","what":"New features","title":"fiphde 0.3.2","text":"release submission script now includes code prepare submission-ready files “experimental” categorical rate change targets.","code":""},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fiphde 0.3.2","text":"Previously validation script’s date format check limited 2021 2022. extended check work 2023 dates. R CMD CHECK GitHub action incremented use “v2” R actions, addresses issue failing continuous integration checks failing repository.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"fiphde 0.3.1","text":"release includes rearranged submission script now executes common procedures (data retrieval, package loads, etc.) top script, CREG TSENS can run independently needed.","code":""},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fiphde 0.3.1","text":"Prior release explorer app (see ?fiphde_launcher) default visualizations locations multiple submission modeling methods loaded app. However, locations available one model submission files, location(s) remain selected forecast visualizations break missing location(s) unselected model. release, app now default selected locations just present given submission file.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"fiphde 0.3.0","text":"release brings additional data retrieval processing functions. package now includes code adapted cdcfluview query NREVSS surveillance system pull clinical laboratory percent positive flu data. who_nrevss() function unexported used user-facing get_cdc_clin() function, pulls preps percent positive data. complementary function, clin_nowcast(), now available augment clinical laboratory percent positivity nowcasted value. package also now includes helper functions prepare covariates modeling. example, new pois_forc() helper creates forecasted counts based recently observed values. can used create forecasted values number tests number positive flu specimens (thefore percent positivity) feed models include percent positive lab results covariate. new smoothie() function also available create weighted averages recent observations, can used covariate data models.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fiphde 0.2.1","text":"Minor fix include “start_date” parameter replace_ili_nowcast() function ILI nowcasting can performed retrospectively needed.","code":""},{"path":[]},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"fiphde 0.2.0","text":"release includes code adapted cdcfluview query ILI flu hospitalization data. functions ilinet() hospitalizations(), unexported used helper functions internally. example, ilinet() used exported get_cdc_ili() function. including functions, minimized number dependencies fiphde thereby streamlining package installation procedure.","code":""},{"path":"https://signaturescience.github.io/fiphde/news/index.html","id":"fiphde-010","dir":"Changelog","previous_headings":"","what":"fiphde 0.1.0","title":"fiphde 0.1.0","text":"Initial release ! Built checked successfully Ubuntu 20.04, Windows Server 2022, Mac OSX.","code":""}]
